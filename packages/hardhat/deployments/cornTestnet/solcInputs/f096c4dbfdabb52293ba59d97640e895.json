{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1363.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * Both values are immutable: they can only be set once during construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/CropCircle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/**\n * @title CropToken - ERC20 utility token for CropCircle platform\n * @dev Standard ERC20 token with minting capability for the owner\n */\ncontract CropToken is ERC20, Ownable {\n    /**\n     * @notice Creates the CROP token with an initial supply for the deployer\n     * @param initialSupply The initial token supply to mint to the deployer\n     */\n    constructor(uint256 initialSupply) ERC20(\"CROP Token\", \"CROP\") Ownable(msg.sender) {\n        _mint(msg.sender, initialSupply);\n    }\n\n    /**\n     * @notice Allows the owner to mint additional tokens\n     * @param to The address to receive the minted tokens\n     * @param amount The amount of tokens to mint\n     */\n    function mint(address to, uint256 amount) external onlyOwner {\n        _mint(to, amount);\n    }\n}\n\n/**\n * @title CropCircle - Collaborative Memecoin Launcher\n * @author CropCircle Team\n * @notice This contract allows users to participate in meme creation and voting for memecoin launches\n * @dev Implementation of the CropCircle protocol for in-person events on CORN network\n */\ncontract CropCircle is Ownable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n    \n    /// @notice Initial token amount given to users\n    uint256 public constant INITIAL_TOKEN_AMOUNT = 100 * 10**18;\n    \n    /// @notice Cost to submit a meme\n    uint256 public constant MEME_SUBMISSION_COST = 60 * 10**18;\n    \n    /// @notice Cost to cast a vote\n    uint256 public constant VOTE_COST = 1 * 10**18;\n    \n    /// @notice Total supply for winning meme token\n    uint256 public constant WINNING_TOKEN_SUPPLY = 100000 * 10**18;\n    \n    /// @notice Percentage of tokens allocated to the winner (30%)\n    uint256 public constant WINNER_PERCENTAGE = 30;\n    \n    /// @notice Percentage of tokens allocated to voters (70%)\n    uint256 public constant VOTERS_PERCENTAGE = 70;\n    \n    /// @notice Address of the CROP token contract\n    IERC20 public cropToken;\n\n    /// @notice Mapping to track users who have already claimed their initial tokens\n    mapping(bytes32 => mapping(address => bool)) public hasClaimedTokens;\n\n    /**\n     * @notice Meme structure representing a submitted meme\n     */\n    struct Meme {\n        string name;        // Token ticker\n        string imageHash;   // IPFS hash\n        string description;\n        address creator;\n        uint256 upvotes;\n        uint256 downvotes;\n        uint256 timestamp;\n        mapping(address => bool) hasVoted;\n        mapping(address => int8) voteType; // 1 for up, -1 for down\n    }\n\n    /**\n     * @notice Event information structure\n     */\n    struct EventInfo {\n        uint256 startTime;\n        uint256 endTime;\n        bytes32 qrCodeHash;\n        bool active;\n        uint256 memeCount;\n        address winningTokenAddress;\n        uint256 winningMemeId;\n        bool isFinalized;\n    }\n\n    // State variables\n    \n    /// @notice Mapping from eventId to Event data\n    mapping(bytes32 => EventInfo) public events;\n    \n    /// @notice Mapping from eventId to memeId to Meme data\n    mapping(bytes32 => mapping(uint256 => Meme)) public memes;\n    \n    /// @notice Mapping from eventId to array of meme IDs\n    mapping(bytes32 => uint256[]) public eventMemeIds;\n    \n    /// @notice Mapping from eventId to mapping of memeId to array of upvoters\n    mapping(bytes32 => mapping(uint256 => address[])) private memeUpvoters;\n\n    // Events\n\n    /**\n     * @notice Emitted when a new event is created\n     * @param eventId The unique identifier of the event\n     * @param startTime The start time of the event\n     * @param endTime The end time of the event\n     * @param qrCodeHash The hash of the event's QR code\n     */\n    event EventCreated(\n        bytes32 indexed eventId,\n        uint256 startTime,\n        uint256 endTime,\n        bytes32 qrCodeHash\n    );\n\n    /**\n     * @notice Emitted when a new meme is submitted\n     * @param eventId The event ID\n     * @param memeId The ID of the submitted meme\n     * @param creator The address of the meme creator\n     * @param name The name of the meme (token ticker)\n     * @param imageHash The IPFS hash of the meme image\n     * @param description The description of the meme\n     * @param timestamp The submission timestamp\n     */\n    event MemeSubmitted(\n        bytes32 indexed eventId,\n        uint256 indexed memeId,\n        address creator,\n        string name,\n        string imageHash,\n        string description,\n        uint256 timestamp\n    );\n\n    /**\n     * @notice Emitted when a vote is cast on a meme\n     * @param eventId The event ID\n     * @param memeId The ID of the meme being voted on\n     * @param voter The address of the voter\n     * @param isUpvote Whether the vote is an upvote (true) or downvote (false)\n     * @param timestamp The vote timestamp\n     */\n    event VoteCast(\n        bytes32 indexed eventId,\n        uint256 indexed memeId,\n        address voter,\n        bool isUpvote,\n        uint256 timestamp\n    );\n\n    /**\n     * @notice Emitted when an event is finalized and tokens are distributed\n     * @param eventId The event ID\n     * @param winningMemeId The ID of the winning meme\n     * @param tokenAddress The address of the newly deployed token\n     */\n    event EventEnded(\n        bytes32 indexed eventId,\n        uint256 winningMemeId,\n        address tokenAddress\n    );\n\n    /**\n     * @notice Emitted when tokens are distributed to a user\n     * @param eventId The event ID\n     * @param recipient The address of the token recipient\n     * @param amount The amount of tokens distributed\n     */\n    event TokensDistributed(\n        bytes32 indexed eventId,\n        address recipient,\n        uint256 amount\n    );\n\n    /**\n     * @notice Emitted when initial $CROP tokens are provided to a user\n     * @param user The address of the token recipient\n     * @param amount The amount of tokens provided\n     */\n    event InitialTokensProvided(\n        address indexed user,\n        uint256 amount\n    );\n\n    /**\n     * @dev Constructor sets the contract deployer as the owner and stores the CROP token address\n     * @param _cropTokenAddress The address of the deployed CROP token\n     */\n    constructor(address _cropTokenAddress) Ownable(msg.sender) {\n        require(_cropTokenAddress != address(0), \"Invalid token address\");\n        cropToken = IERC20(_cropTokenAddress);\n    }\n\n    /**\n     * @notice Creates a new event with the specified duration\n     * @dev Automatically generates a QR code hash internally\n     * @param duration The duration of the event in seconds\n     * @return eventId The unique identifier of the created event\n     * @return qrCodeHash The generated QR code hash for frontend use\n     */\n    function createEvent(uint256 duration) external onlyOwner returns (bytes32 eventId, bytes32 qrCodeHash) {\n        require(duration > 0, \"Duration must be greater than 0\");\n        \n        uint256 startTime = block.timestamp;\n        uint256 endTime = startTime + duration;\n        \n        // Generate a unique QR code hash internally\n        qrCodeHash = keccak256(abi.encodePacked(startTime, endTime, msg.sender, block.number));\n        \n        // Generate a unique eventId\n        eventId = keccak256(abi.encodePacked(startTime, endTime, qrCodeHash, msg.sender));\n        \n        // Ensure the eventId is not already in use\n        require(events[eventId].startTime == 0, \"Event ID already exists\");\n        \n        // Create and store the event\n        events[eventId] = EventInfo({\n            startTime: startTime,\n            endTime: endTime,\n            qrCodeHash: qrCodeHash,\n            active: true,\n            memeCount: 0,\n            winningTokenAddress: address(0),\n            winningMemeId: 0,\n            isFinalized: false\n        });\n        \n        emit EventCreated(eventId, startTime, endTime, qrCodeHash);\n        \n        return (eventId, qrCodeHash);\n    }\n\n    /**\n     * @notice Provides initial $CROP tokens to a user (callable only once per user per event)\n     * @dev This function would typically be called when a user scans the QR code\n     * @param eventId The event ID\n     */\n    function provideInitialTokens(bytes32 eventId) external nonReentrant {\n        require(events[eventId].active, \"Event is not active\");\n        require(events[eventId].startTime <= block.timestamp, \"Event has not started yet\");\n        require(events[eventId].endTime >= block.timestamp, \"Event has already ended\");\n        require(!hasClaimedTokens[eventId][msg.sender], \"Initial tokens already claimed\");\n        \n        // Mark user as having claimed tokens for this event\n        hasClaimedTokens[eventId][msg.sender] = true;\n        \n        // Transfer CROP tokens to the user\n        require(cropToken.balanceOf(address(this)) >= INITIAL_TOKEN_AMOUNT, \"Insufficient contract balance\");\n        cropToken.safeTransfer(msg.sender, INITIAL_TOKEN_AMOUNT);\n        \n        emit InitialTokensProvided(msg.sender, INITIAL_TOKEN_AMOUNT);\n    }\n\n    /**\n     * @notice Submits a new meme to an event\n     * @param eventId The event ID\n     * @param name The name of the meme (token ticker)\n     * @param imageHash The IPFS hash of the meme image\n     * @param description The description of the meme\n     */\n    function submitMeme(\n        bytes32 eventId, \n        string memory name, \n        string memory imageHash, \n        string memory description\n    ) external nonReentrant {\n        require(events[eventId].active, \"Event is not active\");\n        require(events[eventId].startTime <= block.timestamp, \"Event has not started yet\");\n        require(events[eventId].endTime >= block.timestamp, \"Event has already ended\");\n        require(bytes(name).length > 0, \"Name cannot be empty\");\n        require(bytes(imageHash).length > 0, \"Image hash cannot be empty\");\n        require(bytes(description).length > 0, \"Description cannot be empty\");\n        require(cropToken.balanceOf(msg.sender) >= MEME_SUBMISSION_COST, \"Insufficient balance\");\n        \n        // Collect tokens from the sender\n        cropToken.safeTransferFrom(msg.sender, address(this), MEME_SUBMISSION_COST);\n        \n        // Get the next meme ID\n        uint256 memeId = events[eventId].memeCount;\n        \n        // Create and store the meme\n        Meme storage newMeme = memes[eventId][memeId];\n        newMeme.name = name;\n        newMeme.imageHash = imageHash;\n        newMeme.description = description;\n        newMeme.creator = msg.sender;\n        newMeme.timestamp = block.timestamp;\n        newMeme.upvotes = 0;\n        newMeme.downvotes = 0;\n        \n        // Add meme ID to the event's meme list\n        eventMemeIds[eventId].push(memeId);\n        \n        // Increment the meme count\n        events[eventId].memeCount++;\n        \n        emit MemeSubmitted(\n            eventId,\n            memeId,\n            msg.sender,\n            name,\n            imageHash,\n            description,\n            block.timestamp\n        );\n    }\n\n    /**\n     * @notice Casts a vote on a meme\n     * @param eventId The event ID\n     * @param memeId The ID of the meme to vote on\n     * @param isUpvote Whether the vote is an upvote (true) or downvote (false)\n     */\n    function vote(bytes32 eventId, uint256 memeId, bool isUpvote) external nonReentrant {\n        require(events[eventId].active, \"Event is not active\");\n        require(events[eventId].startTime <= block.timestamp, \"Event has not started yet\");\n        require(events[eventId].endTime >= block.timestamp, \"Event has already ended\");\n        require(memeId < events[eventId].memeCount, \"Invalid meme ID\");\n        require(!memes[eventId][memeId].hasVoted[msg.sender], \"Already voted on this meme\");\n        require(cropToken.balanceOf(msg.sender) >= VOTE_COST, \"Insufficient balance\");\n        \n        // Collect tokens from the sender\n        cropToken.safeTransferFrom(msg.sender, address(this), VOTE_COST);\n        \n        // Update vote counts and mappings\n        Meme storage targetMeme = memes[eventId][memeId];\n        targetMeme.hasVoted[msg.sender] = true;\n        \n        if (isUpvote) {\n            targetMeme.upvotes += 1;\n            targetMeme.voteType[msg.sender] = 1;\n            // Track upvoters for token distribution\n            memeUpvoters[eventId][memeId].push(msg.sender);\n        } else {\n            targetMeme.downvotes += 1;\n            targetMeme.voteType[msg.sender] = -1;\n        }\n        \n        emit VoteCast(eventId, memeId, msg.sender, isUpvote, block.timestamp);\n    }\n\n    /**\n     * @dev Finds the winning meme in an event (highest upvote count)\n     * @param eventId The event ID\n     * @return The ID of the winning meme\n     */\n    function findWinningMeme(bytes32 eventId) internal view returns (uint256) {\n        uint256 highestUpvotes = 0;\n        uint256 winningId = 0;\n        \n        for (uint256 i = 0; i < events[eventId].memeCount; i++) {\n            if (memes[eventId][i].upvotes > highestUpvotes) {\n                highestUpvotes = memes[eventId][i].upvotes;\n                winningId = i;\n            }\n        }\n        \n        return winningId;\n    }\n\n    /**\n     * @notice Finalizes an event, determining the winner and deploying the token\n     * @param eventId The event ID\n     */\n    function endEvent(bytes32 eventId) external onlyOwner nonReentrant {\n        require(events[eventId].active, \"Event is not active\");\n        require(!events[eventId].isFinalized, \"Event already finalized\");\n        require(events[eventId].memeCount > 0, \"No memes submitted\");\n        \n        // Set event as inactive\n        events[eventId].active = false;\n        events[eventId].isFinalized = true;\n        \n        // Determine the winning meme (highest upvote count)\n        uint256 winningMemeId = findWinningMeme(eventId);\n        events[eventId].winningMemeId = winningMemeId;\n        \n        Meme storage winningMeme = memes[eventId][winningMemeId];\n        \n        // Deploy the new token\n        MemeToken newToken = new MemeToken(winningMeme.name, winningMeme.name);\n        address tokenAddress = address(newToken);\n        \n        // Store token address\n        events[eventId].winningTokenAddress = tokenAddress;\n        \n        // ---- Token Distribution Logic ----\n        // Calculate token amounts\n        uint256 creatorAmount = (WINNING_TOKEN_SUPPLY * WINNER_PERCENTAGE) / 100;\n        uint256 votersAmount = WINNING_TOKEN_SUPPLY - creatorAmount;\n        \n        // Distribute to creator\n        newToken.transfer(winningMeme.creator, creatorAmount);\n        emit TokensDistributed(eventId, winningMeme.creator, creatorAmount);\n        \n        // Distribute to upvoters\n        address[] storage upvoters = memeUpvoters[eventId][winningMemeId];\n        uint256 upvoteCount = upvoters.length;\n        \n        if (upvoteCount > 0) {\n            uint256 tokenPerUpvoter = votersAmount / upvoteCount;\n            \n            for (uint256 i = 0; i < upvoteCount; i++) {\n                address upvoter = upvoters[i];\n                newToken.transfer(upvoter, tokenPerUpvoter);\n                emit TokensDistributed(eventId, upvoter, tokenPerUpvoter);\n            }\n            \n            // If there's any remainder due to division, send it to the creator\n            uint256 remainder = votersAmount - (tokenPerUpvoter * upvoteCount);\n            if (remainder > 0) {\n                newToken.transfer(winningMeme.creator, remainder);\n                emit TokensDistributed(eventId, winningMeme.creator, remainder);\n            }\n        } else {\n            // If no upvoters, give all remaining tokens to creator\n            newToken.transfer(winningMeme.creator, votersAmount);\n            emit TokensDistributed(eventId, winningMeme.creator, votersAmount);\n        }\n        \n        emit EventEnded(eventId, winningMemeId, tokenAddress);\n    }\n\n    /**\n     * @notice Allows the owner to refill the contract's CROP token balance\n     * @param amount The amount of tokens to add\n     */\n    function refillTokens(uint256 amount) external {\n        cropToken.safeTransferFrom(msg.sender, address(this), amount);\n    }\n\n    /**\n     * @notice Gets details about an event\n     * @param eventId The event ID\n     * @return startTime The start time of the event\n     * @return endTime The end time of the event\n     * @return qrCodeHash The hash of the event's QR code\n     * @return active Whether the event is active\n     * @return memeCount The number of memes submitted\n     * @return winningTokenAddress The address of the winning token (if event has ended)\n     * @return winningMemeId The ID of the winning meme (if event has ended)\n     * @return isFinalized Whether the event has been finalized\n     */\n    function getEventDetails(bytes32 eventId) external view returns (\n        uint256 startTime,\n        uint256 endTime,\n        bytes32 qrCodeHash,\n        bool active,\n        uint256 memeCount,\n        address winningTokenAddress,\n        uint256 winningMemeId,\n        bool isFinalized\n    ) {\n        EventInfo storage eventInfo = events[eventId];\n        return (\n            eventInfo.startTime,\n            eventInfo.endTime,\n            eventInfo.qrCodeHash,\n            eventInfo.active,\n            eventInfo.memeCount,\n            eventInfo.winningTokenAddress,\n            eventInfo.winningMemeId,\n            eventInfo.isFinalized\n        );\n    }\n\n    /**\n     * @notice Gets details about a meme\n     * @param eventId The event ID\n     * @param memeId The meme ID\n     * @return name The name of the meme\n     * @return imageHash The IPFS hash of the meme image\n     * @return description The description of the meme\n     * @return creator The address of the meme creator\n     * @return upvotes The number of upvotes\n     * @return downvotes The number of downvotes\n     * @return timestamp The submission timestamp\n     */\n    function getMemeDetails(bytes32 eventId, uint256 memeId) external view returns (\n        string memory name,\n        string memory imageHash,\n        string memory description,\n        address creator,\n        uint256 upvotes,\n        uint256 downvotes,\n        uint256 timestamp\n    ) {\n        require(memeId < events[eventId].memeCount, \"Invalid meme ID\");\n        \n        Meme storage meme = memes[eventId][memeId];\n        return (\n            meme.name,\n            meme.imageHash,\n            meme.description,\n            meme.creator,\n            meme.upvotes,\n            meme.downvotes,\n            meme.timestamp\n        );\n    }\n\n    /**\n     * @notice Gets all meme IDs for an event\n     * @param eventId The event ID\n     * @return An array of meme IDs\n     */\n    function getEventMemeIds(bytes32 eventId) external view returns (uint256[] memory) {\n        return eventMemeIds[eventId];\n    }\n\n    /**\n     * @notice Checks if a user has voted on a specific meme\n     * @param eventId The event ID\n     * @param memeId The meme ID\n     * @param user The user address\n     * @return hasVoted Whether the user has voted\n     * @return voteType The type of vote (1 for upvote, -1 for downvote, 0 if no vote)\n     */\n    function getUserVote(bytes32 eventId, uint256 memeId, address user) external view returns (bool hasVoted, int8 voteType) {\n        require(memeId < events[eventId].memeCount, \"Invalid meme ID\");\n        \n        Meme storage meme = memes[eventId][memeId];\n        return (meme.hasVoted[user], meme.voteType[user]);\n    }\n\n    /**\n     * @notice Gets the total score of a meme (upvotes - downvotes)\n     * @param eventId The event ID\n     * @param memeId The meme ID\n     * @return The total score\n     */\n    function getMemeScore(bytes32 eventId, uint256 memeId) external view returns (int256) {\n        require(memeId < events[eventId].memeCount, \"Invalid meme ID\");\n        \n        Meme storage meme = memes[eventId][memeId];\n        return int256(meme.upvotes) - int256(meme.downvotes);\n    }\n\n    /**\n     * @notice Gets the upvoters for a specific meme\n     * @param eventId The event ID\n     * @param memeId The meme ID\n     * @return The array of upvoter addresses\n     */\n    function getMemeUpvoters(bytes32 eventId, uint256 memeId) external view returns (address[] memory) {\n        require(memeId < events[eventId].memeCount, \"Invalid meme ID\");\n        return memeUpvoters[eventId][memeId];\n    }\n\n    /**\n     * @notice Checks if an address has already claimed their initial tokens for an event\n     * @param eventId The event ID\n     * @param user The user address to check\n     * @return Whether the user has claimed tokens\n     */\n    function hasUserClaimedTokens(bytes32 eventId, address user) external view returns (bool) {\n        return hasClaimedTokens[eventId][user];\n    }\n\n    /**\n     * @notice Gets the contract's CROP token balance\n     * @return The contract's token balance\n     */\n    function getContractTokenBalance() external view returns (uint256) {\n        return cropToken.balanceOf(address(this));\n    }\n}\n\n/**\n * @title MemeToken\n * @notice ERC20 token representing the winning meme\n * @dev Simple ERC20 implementation as specified in the requirements\n */\ncontract MemeToken is ERC20 {\n    /**\n     * @notice Creates a new token with the specified name and symbol\n     * @param name The name of the token\n     * @param symbol The symbol of the token\n     */\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\n        _mint(msg.sender, 100000 * 10**decimals());\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}