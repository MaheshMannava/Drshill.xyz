{
  "address": "0x8b9Fa5293f2Bec34bB5eE382eb291eAfE81AF85b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cropTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "eventId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "qrCodeHash",
          "type": "bytes32"
        }
      ],
      "name": "EventCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "eventId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "winningMemeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "EventEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "InitialTokensProvided",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "eventId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "memeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "imageHash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "MemeSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "eventId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "eventId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "memeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isUpvote",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "VoteCast",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INITIAL_TOKEN_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MEME_SUBMISSION_COST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VOTERS_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VOTE_COST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WINNER_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WINNING_TOKEN_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "createEvent",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "eventId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "qrCodeHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cropToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "eventId",
          "type": "bytes32"
        }
      ],
      "name": "endEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "eventMemeIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "events",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "qrCodeHash",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "memeCount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "winningTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "winningMemeId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isFinalized",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractTokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "eventId",
          "type": "bytes32"
        }
      ],
      "name": "getEventDetails",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "qrCodeHash",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "memeCount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "winningTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "winningMemeId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isFinalized",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "eventId",
          "type": "bytes32"
        }
      ],
      "name": "getEventMemeIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "eventId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "memeId",
          "type": "uint256"
        }
      ],
      "name": "getMemeDetails",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "imageHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "upvotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "downvotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "eventId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "memeId",
          "type": "uint256"
        }
      ],
      "name": "getMemeScore",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "eventId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "memeId",
          "type": "uint256"
        }
      ],
      "name": "getMemeUpvoters",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "eventId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "memeId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserVote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "hasVoted",
          "type": "bool"
        },
        {
          "internalType": "int8",
          "name": "voteType",
          "type": "int8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasClaimedTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "eventId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "hasUserClaimedTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "memes",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "imageHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "upvotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "downvotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "eventId",
          "type": "bytes32"
        }
      ],
      "name": "provideInitialTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "refillTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "eventId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "imageHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "submitMeme",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "eventId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "memeId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isUpvote",
          "type": "bool"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x714b246368084697264c9f637b82d3c4f46d17e6aa4aff519e1771c3636f4ccf",
  "receipt": {
    "to": null,
    "from": "0xd4E41a10bECD90434bD1f2C0Bc65d25fec5629D1",
    "contractAddress": "0x8b9Fa5293f2Bec34bB5eE382eb291eAfE81AF85b",
    "transactionIndex": 1,
    "gasUsed": "3155412",
    "logsBloom": "0x
    "blockHash": "0x139a0efe63d851e28c3f93ef30a40139b61c540107c45c7006ede571fa3d34f3",
    "transactionHash": "0x714b246368084697264c9f637b82d3c4f46d17e6aa4aff519e1771c3636f4ccf",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 343887,
        "transactionHash": "0x714b246368084697264c9f637b82d3c4f46d17e6aa4aff519e1771c3636f4ccf",
        "address": "0x8b9Fa5293f2Bec34bB5eE382eb291eAfE81AF85b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d4e41a10becd90434bd1f2c0bc65d25fec5629d1"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x139a0efe63d851e28c3f93ef30a40139b61c540107c45c7006ede571fa3d34f3"
      }
    ],
    "blockNumber": 343887,
    "cumulativeGasUsed": "3155412",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xdcD05f8a029F0A7998fDF29f0e9AE6a97541e370"
  ],
  "numDeployments": 1,
  "solcInputHash": "f096c4dbfdabb52293ba59d97640e895",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cropTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"eventId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"qrCodeHash\",\"type\":\"bytes32\"}],\"name\":\"EventCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"eventId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winningMemeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"EventEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InitialTokensProvided\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"eventId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"memeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"imageHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MemeSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"eventId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"eventId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"memeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isUpvote\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INITIAL_TOKEN_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MEME_SUBMISSION_COST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTERS_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTE_COST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WINNER_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WINNING_TOKEN_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"createEvent\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"eventId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"qrCodeHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cropToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"eventId\",\"type\":\"bytes32\"}],\"name\":\"endEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eventMemeIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"events\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"qrCodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"memeCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winningTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"winningMemeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFinalized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"eventId\",\"type\":\"bytes32\"}],\"name\":\"getEventDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"qrCodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"memeCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winningTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"winningMemeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFinalized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"eventId\",\"type\":\"bytes32\"}],\"name\":\"getEventMemeIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"eventId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"memeId\",\"type\":\"uint256\"}],\"name\":\"getMemeDetails\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"upvotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"downvotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"eventId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"memeId\",\"type\":\"uint256\"}],\"name\":\"getMemeScore\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"eventId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"memeId\",\"type\":\"uint256\"}],\"name\":\"getMemeUpvoters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"eventId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"memeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"int8\",\"name\":\"voteType\",\"type\":\"int8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasClaimedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"eventId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasUserClaimedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"memes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"upvotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"downvotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"eventId\",\"type\":\"bytes32\"}],\"name\":\"provideInitialTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"refillTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"eventId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"submitMeme\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"eventId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"memeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isUpvote\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"CropCircle Team\",\"details\":\"Implementation of the CropCircle protocol for in-person events on CORN network\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"events\":{\"EventCreated(bytes32,uint256,uint256,bytes32)\":{\"params\":{\"endTime\":\"The end time of the event\",\"eventId\":\"The unique identifier of the event\",\"qrCodeHash\":\"The hash of the event's QR code\",\"startTime\":\"The start time of the event\"}},\"EventEnded(bytes32,uint256,address)\":{\"params\":{\"eventId\":\"The event ID\",\"tokenAddress\":\"The address of the newly deployed token\",\"winningMemeId\":\"The ID of the winning meme\"}},\"InitialTokensProvided(address,uint256)\":{\"params\":{\"amount\":\"The amount of tokens provided\",\"user\":\"The address of the token recipient\"}},\"MemeSubmitted(bytes32,uint256,address,string,string,string,uint256)\":{\"params\":{\"creator\":\"The address of the meme creator\",\"description\":\"The description of the meme\",\"eventId\":\"The event ID\",\"imageHash\":\"The IPFS hash of the meme image\",\"memeId\":\"The ID of the submitted meme\",\"name\":\"The name of the meme (token ticker)\",\"timestamp\":\"The submission timestamp\"}},\"TokensDistributed(bytes32,address,uint256)\":{\"params\":{\"amount\":\"The amount of tokens distributed\",\"eventId\":\"The event ID\",\"recipient\":\"The address of the token recipient\"}},\"VoteCast(bytes32,uint256,address,bool,uint256)\":{\"params\":{\"eventId\":\"The event ID\",\"isUpvote\":\"Whether the vote is an upvote (true) or downvote (false)\",\"memeId\":\"The ID of the meme being voted on\",\"timestamp\":\"The vote timestamp\",\"voter\":\"The address of the voter\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor sets the contract deployer as the owner and stores the CROP token address\",\"params\":{\"_cropTokenAddress\":\"The address of the deployed CROP token\"}},\"createEvent(uint256)\":{\"details\":\"Automatically generates a QR code hash internally\",\"params\":{\"duration\":\"The duration of the event in seconds\"},\"returns\":{\"eventId\":\"The unique identifier of the created event\",\"qrCodeHash\":\"The generated QR code hash for frontend use\"}},\"endEvent(bytes32)\":{\"params\":{\"eventId\":\"The event ID\"}},\"getContractTokenBalance()\":{\"returns\":{\"_0\":\"The contract's token balance\"}},\"getEventDetails(bytes32)\":{\"params\":{\"eventId\":\"The event ID\"},\"returns\":{\"active\":\"Whether the event is active\",\"endTime\":\"The end time of the event\",\"isFinalized\":\"Whether the event has been finalized\",\"memeCount\":\"The number of memes submitted\",\"qrCodeHash\":\"The hash of the event's QR code\",\"startTime\":\"The start time of the event\",\"winningMemeId\":\"The ID of the winning meme (if event has ended)\",\"winningTokenAddress\":\"The address of the winning token (if event has ended)\"}},\"getEventMemeIds(bytes32)\":{\"params\":{\"eventId\":\"The event ID\"},\"returns\":{\"_0\":\"An array of meme IDs\"}},\"getMemeDetails(bytes32,uint256)\":{\"params\":{\"eventId\":\"The event ID\",\"memeId\":\"The meme ID\"},\"returns\":{\"creator\":\"The address of the meme creator\",\"description\":\"The description of the meme\",\"downvotes\":\"The number of downvotes\",\"imageHash\":\"The IPFS hash of the meme image\",\"name\":\"The name of the meme\",\"timestamp\":\"The submission timestamp\",\"upvotes\":\"The number of upvotes\"}},\"getMemeScore(bytes32,uint256)\":{\"params\":{\"eventId\":\"The event ID\",\"memeId\":\"The meme ID\"},\"returns\":{\"_0\":\"The total score\"}},\"getMemeUpvoters(bytes32,uint256)\":{\"params\":{\"eventId\":\"The event ID\",\"memeId\":\"The meme ID\"},\"returns\":{\"_0\":\"The array of upvoter addresses\"}},\"getUserVote(bytes32,uint256,address)\":{\"params\":{\"eventId\":\"The event ID\",\"memeId\":\"The meme ID\",\"user\":\"The user address\"},\"returns\":{\"hasVoted\":\"Whether the user has voted\",\"voteType\":\"The type of vote (1 for upvote, -1 for downvote, 0 if no vote)\"}},\"hasUserClaimedTokens(bytes32,address)\":{\"params\":{\"eventId\":\"The event ID\",\"user\":\"The user address to check\"},\"returns\":{\"_0\":\"Whether the user has claimed tokens\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"provideInitialTokens(bytes32)\":{\"details\":\"This function would typically be called when a user scans the QR code\",\"params\":{\"eventId\":\"The event ID\"}},\"refillTokens(uint256)\":{\"params\":{\"amount\":\"The amount of tokens to add\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"submitMeme(bytes32,string,string,string)\":{\"params\":{\"description\":\"The description of the meme\",\"eventId\":\"The event ID\",\"imageHash\":\"The IPFS hash of the meme image\",\"name\":\"The name of the meme (token ticker)\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"vote(bytes32,uint256,bool)\":{\"params\":{\"eventId\":\"The event ID\",\"isUpvote\":\"Whether the vote is an upvote (true) or downvote (false)\",\"memeId\":\"The ID of the meme to vote on\"}}},\"title\":\"CropCircle - Collaborative Memecoin Launcher\",\"version\":1},\"userdoc\":{\"events\":{\"EventCreated(bytes32,uint256,uint256,bytes32)\":{\"notice\":\"Emitted when a new event is created\"},\"EventEnded(bytes32,uint256,address)\":{\"notice\":\"Emitted when an event is finalized and tokens are distributed\"},\"InitialTokensProvided(address,uint256)\":{\"notice\":\"Emitted when initial $CROP tokens are provided to a user\"},\"MemeSubmitted(bytes32,uint256,address,string,string,string,uint256)\":{\"notice\":\"Emitted when a new meme is submitted\"},\"TokensDistributed(bytes32,address,uint256)\":{\"notice\":\"Emitted when tokens are distributed to a user\"},\"VoteCast(bytes32,uint256,address,bool,uint256)\":{\"notice\":\"Emitted when a vote is cast on a meme\"}},\"kind\":\"user\",\"methods\":{\"INITIAL_TOKEN_AMOUNT()\":{\"notice\":\"Initial token amount given to users\"},\"MEME_SUBMISSION_COST()\":{\"notice\":\"Cost to submit a meme\"},\"VOTERS_PERCENTAGE()\":{\"notice\":\"Percentage of tokens allocated to voters (70%)\"},\"VOTE_COST()\":{\"notice\":\"Cost to cast a vote\"},\"WINNER_PERCENTAGE()\":{\"notice\":\"Percentage of tokens allocated to the winner (30%)\"},\"WINNING_TOKEN_SUPPLY()\":{\"notice\":\"Total supply for winning meme token\"},\"createEvent(uint256)\":{\"notice\":\"Creates a new event with the specified duration\"},\"cropToken()\":{\"notice\":\"Address of the CROP token contract\"},\"endEvent(bytes32)\":{\"notice\":\"Finalizes an event, determining the winner and deploying the token\"},\"eventMemeIds(bytes32,uint256)\":{\"notice\":\"Mapping from eventId to array of meme IDs\"},\"events(bytes32)\":{\"notice\":\"Mapping from eventId to Event data\"},\"getContractTokenBalance()\":{\"notice\":\"Gets the contract's CROP token balance\"},\"getEventDetails(bytes32)\":{\"notice\":\"Gets details about an event\"},\"getEventMemeIds(bytes32)\":{\"notice\":\"Gets all meme IDs for an event\"},\"getMemeDetails(bytes32,uint256)\":{\"notice\":\"Gets details about a meme\"},\"getMemeScore(bytes32,uint256)\":{\"notice\":\"Gets the total score of a meme (upvotes - downvotes)\"},\"getMemeUpvoters(bytes32,uint256)\":{\"notice\":\"Gets the upvoters for a specific meme\"},\"getUserVote(bytes32,uint256,address)\":{\"notice\":\"Checks if a user has voted on a specific meme\"},\"hasClaimedTokens(bytes32,address)\":{\"notice\":\"Mapping to track users who have already claimed their initial tokens\"},\"hasUserClaimedTokens(bytes32,address)\":{\"notice\":\"Checks if an address has already claimed their initial tokens for an event\"},\"memes(bytes32,uint256)\":{\"notice\":\"Mapping from eventId to memeId to Meme data\"},\"provideInitialTokens(bytes32)\":{\"notice\":\"Provides initial $CROP tokens to a user (callable only once per user per event)\"},\"refillTokens(uint256)\":{\"notice\":\"Allows the owner to refill the contract's CROP token balance\"},\"submitMeme(bytes32,string,string,string)\":{\"notice\":\"Submits a new meme to an event\"},\"vote(bytes32,uint256,bool)\":{\"notice\":\"Casts a vote on a meme\"}},\"notice\":\"This contract allows users to participate in meme creation and voting for memecoin launches\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CropCircle.sol\":\"CropCircle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * Both values are immutable: they can only be set once during construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x41f6b3b9e030561e7896dbef372b499cc8d418a80c3884a4d65a68f2fdc7493a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/CropCircle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title CropToken - ERC20 utility token for CropCircle platform\\n * @dev Standard ERC20 token with minting capability for the owner\\n */\\ncontract CropToken is ERC20, Ownable {\\n    /**\\n     * @notice Creates the CROP token with an initial supply for the deployer\\n     * @param initialSupply The initial token supply to mint to the deployer\\n     */\\n    constructor(uint256 initialSupply) ERC20(\\\"CROP Token\\\", \\\"CROP\\\") Ownable(msg.sender) {\\n        _mint(msg.sender, initialSupply);\\n    }\\n\\n    /**\\n     * @notice Allows the owner to mint additional tokens\\n     * @param to The address to receive the minted tokens\\n     * @param amount The amount of tokens to mint\\n     */\\n    function mint(address to, uint256 amount) external onlyOwner {\\n        _mint(to, amount);\\n    }\\n}\\n\\n/**\\n * @title CropCircle - Collaborative Memecoin Launcher\\n * @author CropCircle Team\\n * @notice This contract allows users to participate in meme creation and voting for memecoin launches\\n * @dev Implementation of the CropCircle protocol for in-person events on CORN network\\n */\\ncontract CropCircle is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    \\n    /// @notice Initial token amount given to users\\n    uint256 public constant INITIAL_TOKEN_AMOUNT = 100 * 10**18;\\n    \\n    /// @notice Cost to submit a meme\\n    uint256 public constant MEME_SUBMISSION_COST = 60 * 10**18;\\n    \\n    /// @notice Cost to cast a vote\\n    uint256 public constant VOTE_COST = 1 * 10**18;\\n    \\n    /// @notice Total supply for winning meme token\\n    uint256 public constant WINNING_TOKEN_SUPPLY = 100000 * 10**18;\\n    \\n    /// @notice Percentage of tokens allocated to the winner (30%)\\n    uint256 public constant WINNER_PERCENTAGE = 30;\\n    \\n    /// @notice Percentage of tokens allocated to voters (70%)\\n    uint256 public constant VOTERS_PERCENTAGE = 70;\\n    \\n    /// @notice Address of the CROP token contract\\n    IERC20 public cropToken;\\n\\n    /// @notice Mapping to track users who have already claimed their initial tokens\\n    mapping(bytes32 => mapping(address => bool)) public hasClaimedTokens;\\n\\n    /**\\n     * @notice Meme structure representing a submitted meme\\n     */\\n    struct Meme {\\n        string name;        // Token ticker\\n        string imageHash;   // IPFS hash\\n        string description;\\n        address creator;\\n        uint256 upvotes;\\n        uint256 downvotes;\\n        uint256 timestamp;\\n        mapping(address => bool) hasVoted;\\n        mapping(address => int8) voteType; // 1 for up, -1 for down\\n    }\\n\\n    /**\\n     * @notice Event information structure\\n     */\\n    struct EventInfo {\\n        uint256 startTime;\\n        uint256 endTime;\\n        bytes32 qrCodeHash;\\n        bool active;\\n        uint256 memeCount;\\n        address winningTokenAddress;\\n        uint256 winningMemeId;\\n        bool isFinalized;\\n    }\\n\\n    // State variables\\n    \\n    /// @notice Mapping from eventId to Event data\\n    mapping(bytes32 => EventInfo) public events;\\n    \\n    /// @notice Mapping from eventId to memeId to Meme data\\n    mapping(bytes32 => mapping(uint256 => Meme)) public memes;\\n    \\n    /// @notice Mapping from eventId to array of meme IDs\\n    mapping(bytes32 => uint256[]) public eventMemeIds;\\n    \\n    /// @notice Mapping from eventId to mapping of memeId to array of upvoters\\n    mapping(bytes32 => mapping(uint256 => address[])) private memeUpvoters;\\n\\n    // Events\\n\\n    /**\\n     * @notice Emitted when a new event is created\\n     * @param eventId The unique identifier of the event\\n     * @param startTime The start time of the event\\n     * @param endTime The end time of the event\\n     * @param qrCodeHash The hash of the event's QR code\\n     */\\n    event EventCreated(\\n        bytes32 indexed eventId,\\n        uint256 startTime,\\n        uint256 endTime,\\n        bytes32 qrCodeHash\\n    );\\n\\n    /**\\n     * @notice Emitted when a new meme is submitted\\n     * @param eventId The event ID\\n     * @param memeId The ID of the submitted meme\\n     * @param creator The address of the meme creator\\n     * @param name The name of the meme (token ticker)\\n     * @param imageHash The IPFS hash of the meme image\\n     * @param description The description of the meme\\n     * @param timestamp The submission timestamp\\n     */\\n    event MemeSubmitted(\\n        bytes32 indexed eventId,\\n        uint256 indexed memeId,\\n        address creator,\\n        string name,\\n        string imageHash,\\n        string description,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Emitted when a vote is cast on a meme\\n     * @param eventId The event ID\\n     * @param memeId The ID of the meme being voted on\\n     * @param voter The address of the voter\\n     * @param isUpvote Whether the vote is an upvote (true) or downvote (false)\\n     * @param timestamp The vote timestamp\\n     */\\n    event VoteCast(\\n        bytes32 indexed eventId,\\n        uint256 indexed memeId,\\n        address voter,\\n        bool isUpvote,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Emitted when an event is finalized and tokens are distributed\\n     * @param eventId The event ID\\n     * @param winningMemeId The ID of the winning meme\\n     * @param tokenAddress The address of the newly deployed token\\n     */\\n    event EventEnded(\\n        bytes32 indexed eventId,\\n        uint256 winningMemeId,\\n        address tokenAddress\\n    );\\n\\n    /**\\n     * @notice Emitted when tokens are distributed to a user\\n     * @param eventId The event ID\\n     * @param recipient The address of the token recipient\\n     * @param amount The amount of tokens distributed\\n     */\\n    event TokensDistributed(\\n        bytes32 indexed eventId,\\n        address recipient,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice Emitted when initial $CROP tokens are provided to a user\\n     * @param user The address of the token recipient\\n     * @param amount The amount of tokens provided\\n     */\\n    event InitialTokensProvided(\\n        address indexed user,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Constructor sets the contract deployer as the owner and stores the CROP token address\\n     * @param _cropTokenAddress The address of the deployed CROP token\\n     */\\n    constructor(address _cropTokenAddress) Ownable(msg.sender) {\\n        require(_cropTokenAddress != address(0), \\\"Invalid token address\\\");\\n        cropToken = IERC20(_cropTokenAddress);\\n    }\\n\\n    /**\\n     * @notice Creates a new event with the specified duration\\n     * @dev Automatically generates a QR code hash internally\\n     * @param duration The duration of the event in seconds\\n     * @return eventId The unique identifier of the created event\\n     * @return qrCodeHash The generated QR code hash for frontend use\\n     */\\n    function createEvent(uint256 duration) external onlyOwner returns (bytes32 eventId, bytes32 qrCodeHash) {\\n        require(duration > 0, \\\"Duration must be greater than 0\\\");\\n        \\n        uint256 startTime = block.timestamp;\\n        uint256 endTime = startTime + duration;\\n        \\n        // Generate a unique QR code hash internally\\n        qrCodeHash = keccak256(abi.encodePacked(startTime, endTime, msg.sender, block.number));\\n        \\n        // Generate a unique eventId\\n        eventId = keccak256(abi.encodePacked(startTime, endTime, qrCodeHash, msg.sender));\\n        \\n        // Ensure the eventId is not already in use\\n        require(events[eventId].startTime == 0, \\\"Event ID already exists\\\");\\n        \\n        // Create and store the event\\n        events[eventId] = EventInfo({\\n            startTime: startTime,\\n            endTime: endTime,\\n            qrCodeHash: qrCodeHash,\\n            active: true,\\n            memeCount: 0,\\n            winningTokenAddress: address(0),\\n            winningMemeId: 0,\\n            isFinalized: false\\n        });\\n        \\n        emit EventCreated(eventId, startTime, endTime, qrCodeHash);\\n        \\n        return (eventId, qrCodeHash);\\n    }\\n\\n    /**\\n     * @notice Provides initial $CROP tokens to a user (callable only once per user per event)\\n     * @dev This function would typically be called when a user scans the QR code\\n     * @param eventId The event ID\\n     */\\n    function provideInitialTokens(bytes32 eventId) external nonReentrant {\\n        require(events[eventId].active, \\\"Event is not active\\\");\\n        require(events[eventId].startTime <= block.timestamp, \\\"Event has not started yet\\\");\\n        require(events[eventId].endTime >= block.timestamp, \\\"Event has already ended\\\");\\n        require(!hasClaimedTokens[eventId][msg.sender], \\\"Initial tokens already claimed\\\");\\n        \\n        // Mark user as having claimed tokens for this event\\n        hasClaimedTokens[eventId][msg.sender] = true;\\n        \\n        // Transfer CROP tokens to the user\\n        require(cropToken.balanceOf(address(this)) >= INITIAL_TOKEN_AMOUNT, \\\"Insufficient contract balance\\\");\\n        cropToken.safeTransfer(msg.sender, INITIAL_TOKEN_AMOUNT);\\n        \\n        emit InitialTokensProvided(msg.sender, INITIAL_TOKEN_AMOUNT);\\n    }\\n\\n    /**\\n     * @notice Submits a new meme to an event\\n     * @param eventId The event ID\\n     * @param name The name of the meme (token ticker)\\n     * @param imageHash The IPFS hash of the meme image\\n     * @param description The description of the meme\\n     */\\n    function submitMeme(\\n        bytes32 eventId, \\n        string memory name, \\n        string memory imageHash, \\n        string memory description\\n    ) external nonReentrant {\\n        require(events[eventId].active, \\\"Event is not active\\\");\\n        require(events[eventId].startTime <= block.timestamp, \\\"Event has not started yet\\\");\\n        require(events[eventId].endTime >= block.timestamp, \\\"Event has already ended\\\");\\n        require(bytes(name).length > 0, \\\"Name cannot be empty\\\");\\n        require(bytes(imageHash).length > 0, \\\"Image hash cannot be empty\\\");\\n        require(bytes(description).length > 0, \\\"Description cannot be empty\\\");\\n        require(cropToken.balanceOf(msg.sender) >= MEME_SUBMISSION_COST, \\\"Insufficient balance\\\");\\n        \\n        // Collect tokens from the sender\\n        cropToken.safeTransferFrom(msg.sender, address(this), MEME_SUBMISSION_COST);\\n        \\n        // Get the next meme ID\\n        uint256 memeId = events[eventId].memeCount;\\n        \\n        // Create and store the meme\\n        Meme storage newMeme = memes[eventId][memeId];\\n        newMeme.name = name;\\n        newMeme.imageHash = imageHash;\\n        newMeme.description = description;\\n        newMeme.creator = msg.sender;\\n        newMeme.timestamp = block.timestamp;\\n        newMeme.upvotes = 0;\\n        newMeme.downvotes = 0;\\n        \\n        // Add meme ID to the event's meme list\\n        eventMemeIds[eventId].push(memeId);\\n        \\n        // Increment the meme count\\n        events[eventId].memeCount++;\\n        \\n        emit MemeSubmitted(\\n            eventId,\\n            memeId,\\n            msg.sender,\\n            name,\\n            imageHash,\\n            description,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @notice Casts a vote on a meme\\n     * @param eventId The event ID\\n     * @param memeId The ID of the meme to vote on\\n     * @param isUpvote Whether the vote is an upvote (true) or downvote (false)\\n     */\\n    function vote(bytes32 eventId, uint256 memeId, bool isUpvote) external nonReentrant {\\n        require(events[eventId].active, \\\"Event is not active\\\");\\n        require(events[eventId].startTime <= block.timestamp, \\\"Event has not started yet\\\");\\n        require(events[eventId].endTime >= block.timestamp, \\\"Event has already ended\\\");\\n        require(memeId < events[eventId].memeCount, \\\"Invalid meme ID\\\");\\n        require(!memes[eventId][memeId].hasVoted[msg.sender], \\\"Already voted on this meme\\\");\\n        require(cropToken.balanceOf(msg.sender) >= VOTE_COST, \\\"Insufficient balance\\\");\\n        \\n        // Collect tokens from the sender\\n        cropToken.safeTransferFrom(msg.sender, address(this), VOTE_COST);\\n        \\n        // Update vote counts and mappings\\n        Meme storage targetMeme = memes[eventId][memeId];\\n        targetMeme.hasVoted[msg.sender] = true;\\n        \\n        if (isUpvote) {\\n            targetMeme.upvotes += 1;\\n            targetMeme.voteType[msg.sender] = 1;\\n            // Track upvoters for token distribution\\n            memeUpvoters[eventId][memeId].push(msg.sender);\\n        } else {\\n            targetMeme.downvotes += 1;\\n            targetMeme.voteType[msg.sender] = -1;\\n        }\\n        \\n        emit VoteCast(eventId, memeId, msg.sender, isUpvote, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Finds the winning meme in an event (highest upvote count)\\n     * @param eventId The event ID\\n     * @return The ID of the winning meme\\n     */\\n    function findWinningMeme(bytes32 eventId) internal view returns (uint256) {\\n        uint256 highestUpvotes = 0;\\n        uint256 winningId = 0;\\n        \\n        for (uint256 i = 0; i < events[eventId].memeCount; i++) {\\n            if (memes[eventId][i].upvotes > highestUpvotes) {\\n                highestUpvotes = memes[eventId][i].upvotes;\\n                winningId = i;\\n            }\\n        }\\n        \\n        return winningId;\\n    }\\n\\n    /**\\n     * @notice Finalizes an event, determining the winner and deploying the token\\n     * @param eventId The event ID\\n     */\\n    function endEvent(bytes32 eventId) external onlyOwner nonReentrant {\\n        require(events[eventId].active, \\\"Event is not active\\\");\\n        require(!events[eventId].isFinalized, \\\"Event already finalized\\\");\\n        require(events[eventId].memeCount > 0, \\\"No memes submitted\\\");\\n        \\n        // Set event as inactive\\n        events[eventId].active = false;\\n        events[eventId].isFinalized = true;\\n        \\n        // Determine the winning meme (highest upvote count)\\n        uint256 winningMemeId = findWinningMeme(eventId);\\n        events[eventId].winningMemeId = winningMemeId;\\n        \\n        Meme storage winningMeme = memes[eventId][winningMemeId];\\n        \\n        // Deploy the new token\\n        MemeToken newToken = new MemeToken(winningMeme.name, winningMeme.name);\\n        address tokenAddress = address(newToken);\\n        \\n        // Store token address\\n        events[eventId].winningTokenAddress = tokenAddress;\\n        \\n        // ---- Token Distribution Logic ----\\n        // Calculate token amounts\\n        uint256 creatorAmount = (WINNING_TOKEN_SUPPLY * WINNER_PERCENTAGE) / 100;\\n        uint256 votersAmount = WINNING_TOKEN_SUPPLY - creatorAmount;\\n        \\n        // Distribute to creator\\n        newToken.transfer(winningMeme.creator, creatorAmount);\\n        emit TokensDistributed(eventId, winningMeme.creator, creatorAmount);\\n        \\n        // Distribute to upvoters\\n        address[] storage upvoters = memeUpvoters[eventId][winningMemeId];\\n        uint256 upvoteCount = upvoters.length;\\n        \\n        if (upvoteCount > 0) {\\n            uint256 tokenPerUpvoter = votersAmount / upvoteCount;\\n            \\n            for (uint256 i = 0; i < upvoteCount; i++) {\\n                address upvoter = upvoters[i];\\n                newToken.transfer(upvoter, tokenPerUpvoter);\\n                emit TokensDistributed(eventId, upvoter, tokenPerUpvoter);\\n            }\\n            \\n            // If there's any remainder due to division, send it to the creator\\n            uint256 remainder = votersAmount - (tokenPerUpvoter * upvoteCount);\\n            if (remainder > 0) {\\n                newToken.transfer(winningMeme.creator, remainder);\\n                emit TokensDistributed(eventId, winningMeme.creator, remainder);\\n            }\\n        } else {\\n            // If no upvoters, give all remaining tokens to creator\\n            newToken.transfer(winningMeme.creator, votersAmount);\\n            emit TokensDistributed(eventId, winningMeme.creator, votersAmount);\\n        }\\n        \\n        emit EventEnded(eventId, winningMemeId, tokenAddress);\\n    }\\n\\n    /**\\n     * @notice Allows the owner to refill the contract's CROP token balance\\n     * @param amount The amount of tokens to add\\n     */\\n    function refillTokens(uint256 amount) external {\\n        cropToken.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    /**\\n     * @notice Gets details about an event\\n     * @param eventId The event ID\\n     * @return startTime The start time of the event\\n     * @return endTime The end time of the event\\n     * @return qrCodeHash The hash of the event's QR code\\n     * @return active Whether the event is active\\n     * @return memeCount The number of memes submitted\\n     * @return winningTokenAddress The address of the winning token (if event has ended)\\n     * @return winningMemeId The ID of the winning meme (if event has ended)\\n     * @return isFinalized Whether the event has been finalized\\n     */\\n    function getEventDetails(bytes32 eventId) external view returns (\\n        uint256 startTime,\\n        uint256 endTime,\\n        bytes32 qrCodeHash,\\n        bool active,\\n        uint256 memeCount,\\n        address winningTokenAddress,\\n        uint256 winningMemeId,\\n        bool isFinalized\\n    ) {\\n        EventInfo storage eventInfo = events[eventId];\\n        return (\\n            eventInfo.startTime,\\n            eventInfo.endTime,\\n            eventInfo.qrCodeHash,\\n            eventInfo.active,\\n            eventInfo.memeCount,\\n            eventInfo.winningTokenAddress,\\n            eventInfo.winningMemeId,\\n            eventInfo.isFinalized\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets details about a meme\\n     * @param eventId The event ID\\n     * @param memeId The meme ID\\n     * @return name The name of the meme\\n     * @return imageHash The IPFS hash of the meme image\\n     * @return description The description of the meme\\n     * @return creator The address of the meme creator\\n     * @return upvotes The number of upvotes\\n     * @return downvotes The number of downvotes\\n     * @return timestamp The submission timestamp\\n     */\\n    function getMemeDetails(bytes32 eventId, uint256 memeId) external view returns (\\n        string memory name,\\n        string memory imageHash,\\n        string memory description,\\n        address creator,\\n        uint256 upvotes,\\n        uint256 downvotes,\\n        uint256 timestamp\\n    ) {\\n        require(memeId < events[eventId].memeCount, \\\"Invalid meme ID\\\");\\n        \\n        Meme storage meme = memes[eventId][memeId];\\n        return (\\n            meme.name,\\n            meme.imageHash,\\n            meme.description,\\n            meme.creator,\\n            meme.upvotes,\\n            meme.downvotes,\\n            meme.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets all meme IDs for an event\\n     * @param eventId The event ID\\n     * @return An array of meme IDs\\n     */\\n    function getEventMemeIds(bytes32 eventId) external view returns (uint256[] memory) {\\n        return eventMemeIds[eventId];\\n    }\\n\\n    /**\\n     * @notice Checks if a user has voted on a specific meme\\n     * @param eventId The event ID\\n     * @param memeId The meme ID\\n     * @param user The user address\\n     * @return hasVoted Whether the user has voted\\n     * @return voteType The type of vote (1 for upvote, -1 for downvote, 0 if no vote)\\n     */\\n    function getUserVote(bytes32 eventId, uint256 memeId, address user) external view returns (bool hasVoted, int8 voteType) {\\n        require(memeId < events[eventId].memeCount, \\\"Invalid meme ID\\\");\\n        \\n        Meme storage meme = memes[eventId][memeId];\\n        return (meme.hasVoted[user], meme.voteType[user]);\\n    }\\n\\n    /**\\n     * @notice Gets the total score of a meme (upvotes - downvotes)\\n     * @param eventId The event ID\\n     * @param memeId The meme ID\\n     * @return The total score\\n     */\\n    function getMemeScore(bytes32 eventId, uint256 memeId) external view returns (int256) {\\n        require(memeId < events[eventId].memeCount, \\\"Invalid meme ID\\\");\\n        \\n        Meme storage meme = memes[eventId][memeId];\\n        return int256(meme.upvotes) - int256(meme.downvotes);\\n    }\\n\\n    /**\\n     * @notice Gets the upvoters for a specific meme\\n     * @param eventId The event ID\\n     * @param memeId The meme ID\\n     * @return The array of upvoter addresses\\n     */\\n    function getMemeUpvoters(bytes32 eventId, uint256 memeId) external view returns (address[] memory) {\\n        require(memeId < events[eventId].memeCount, \\\"Invalid meme ID\\\");\\n        return memeUpvoters[eventId][memeId];\\n    }\\n\\n    /**\\n     * @notice Checks if an address has already claimed their initial tokens for an event\\n     * @param eventId The event ID\\n     * @param user The user address to check\\n     * @return Whether the user has claimed tokens\\n     */\\n    function hasUserClaimedTokens(bytes32 eventId, address user) external view returns (bool) {\\n        return hasClaimedTokens[eventId][user];\\n    }\\n\\n    /**\\n     * @notice Gets the contract's CROP token balance\\n     * @return The contract's token balance\\n     */\\n    function getContractTokenBalance() external view returns (uint256) {\\n        return cropToken.balanceOf(address(this));\\n    }\\n}\\n\\n/**\\n * @title MemeToken\\n * @notice ERC20 token representing the winning meme\\n * @dev Simple ERC20 implementation as specified in the requirements\\n */\\ncontract MemeToken is ERC20 {\\n    /**\\n     * @notice Creates a new token with the specified name and symbol\\n     * @param name The name of the token\\n     * @param symbol The symbol of the token\\n     */\\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\\n        _mint(msg.sender, 100000 * 10**decimals());\\n    }\\n}\\n\",\"keccak256\":\"0xbde017a00340ac1ac14e7efcba107d1bf05eba08c0f98f49f0dc32cbdfc7ec8a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620038643803806200386483398101604081905262000034916200013a565b33806200005c57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6200006781620000ea565b50600180556001600160a01b038116620000c45760405162461bcd60e51b815260206004820152601560248201527f496e76616c696420746f6b656e20616464726573730000000000000000000000604482015260640162000053565b600280546001600160a01b0319166001600160a01b03929092169190911790556200016c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156200014d57600080fd5b81516001600160a01b03811681146200016557600080fd5b9392505050565b6136e8806200017c6000396000f3fe60806040523480156200001157600080fd5b5060043610620001e95760003560e01c8063819c18a8116200010d578063b4447a5911620000a3578063e86ba67a116200007a578063e86ba67a1462000581578063f2fde38b146200058a578063f926892614620005a1578063fe71b8ba14620005d357600080fd5b8063b4447a5914620004cc578063bfdc4a611462000508578063d33ec635146200056d57600080fd5b806394c1a7e511620000e457806394c1a7e5146200046e57806395675322146200047f57806396df4a951462000488578063977d996d146200049f57600080fd5b8063819c18a814620003e05780638da5cb5b14620004065780639350e703146200042c57600080fd5b80633dc78c0311620001835780636bb88e6e116200015a5780636bb88e6e14620003915780636ce0214914620003a8578063715018a614620003bf5780637ef5b6ea14620003c957600080fd5b80633dc78c031462000342578063466d97bd146200035457806366158ac8146200037a57600080fd5b80632c729fd111620001c45780632c729fd1146200025c5780632ca1089814620002735780632caef7a81462000321578063317d9453146200033857600080fd5b8063201e6abc14620001ee5780632765a5de14620002235780632b0b1c491462000243575b600080fd5b62000205620001ff36600462002165565b620005e3565b6040516200021a9796959493929190620021d0565b60405180910390f35b6200023468056bc75e2d6310000081565b6040519081526020016200021a565b6200025a620002543660046200223f565b62000850565b005b6200025a6200026d36600462002268565b62000e2e565b620002da620002843660046200223f565b60009081526004602081905260409091208054600182015460028301546003840154948401546005850154600686015460079096015494979396929560ff9384169592946001600160a01b039092169390921690565b60408051988952602089019790975295870194909452911515606086015260808501526001600160a01b031660a084015260c0830152151560e0820152610100016200021a565b620002346200033236600462002165565b62001194565b62000234620011c6565b6200023469152d02c7e14af680000081565b6200036b6200036536600462002165565b6200123b565b6040516200021a9190620022a4565b620002056200038b36600462002165565b620012e8565b6200025a620003a23660046200223f565b620014e8565b62000234620003b936600462002165565b6200174e565b6200025a620017b8565b6200025a620003da3660046200223f565b620017d0565b620003f7620003f13660046200223f565b620017ea565b6040516200021a9190620022f3565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016200021a565b6200045d6200043d3660046200234a565b600360209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016200021a565b62000234680340aad21b3b70000081565b62000234604681565b6200025a6200049936600462002424565b6200184e565b620004b6620004b03660046200223f565b62001bda565b604080519283526020830191909152016200021a565b6200045d620004dd3660046200234a565b60009182526003602090815260408084206001600160a01b0393909316845291905290205460ff1690565b620002da620005193660046200223f565b60046020819052600091825260409091208054600182015460028301546003840154948401546005850154600686015460079096015494969395929460ff9485169492936001600160a01b03909216921688565b60025462000413906001600160a01b031681565b62000234601e81565b6200025a6200059b366004620024c0565b62001e55565b620005b8620005b2366004620024e5565b62001e96565b60408051921515835260009190910b6020830152016200021a565b62000234670de0b6b3a764000081565b6060806060600080600080600460008a81526020019081526020016000206004015488106200062f5760405162461bcd60e51b815260040162000626906200251d565b60405180910390fd5b60008981526005602081815260408084208c855290915290912060038101546004820154928201546006830154835493948594600186019460028701946001600160a01b039091169390918790620006879062002546565b80601f0160208091040260200160405190810160405280929190818152602001828054620006b59062002546565b8015620007065780601f10620006da5761010080835404028352916020019162000706565b820191906000526020600020905b815481529060010190602001808311620006e857829003601f168201915b505050505096508580546200071b9062002546565b80601f0160208091040260200160405190810160405280929190818152602001828054620007499062002546565b80156200079a5780601f106200076e576101008083540402835291602001916200079a565b820191906000526020600020905b8154815290600101906020018083116200077c57829003601f168201915b50505050509550848054620007af9062002546565b80601f0160208091040260200160405190810160405280929190818152602001828054620007dd9062002546565b80156200082e5780601f1062000802576101008083540402835291602001916200082e565b820191906000526020600020905b8154815290600101906020018083116200081057829003601f168201915b5050505050945097509750975097509750975097505092959891949750929550565b6200085a62001f15565b6200086462001f44565b60008181526004602052604090206003015460ff16620008985760405162461bcd60e51b8152600401620006269062002582565b60008181526004602052604090206007015460ff1615620008fc5760405162461bcd60e51b815260206004820152601760248201527f4576656e7420616c72656164792066696e616c697a6564000000000000000000604482015260640162000626565b60008181526004602081905260409091200154620009525760405162461bcd60e51b8152602060048201526012602482015271139bc81b595b595cc81cdd589b5a5d1d195960721b604482015260640162000626565b600081815260046020526040812060038101805460ff19908116909155600790910180549091166001179055620009898262001f6f565b60008381526004602090815260408083206006018490556005825280832084845290915280822090519293509182908190620009c59062002157565b620009d292919062002634565b604051809103906000f080158015620009ef573d6000803e3d6000fd5b50600085815260046020526040812060050180546001600160a01b0319166001600160a01b0384161790559091508190606462000a38601e69152d02c7e14af68000006200267c565b62000a44919062002696565b9050600062000a5e8269152d02c7e14af6800000620026b9565b600386015460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810185905291925085169063a9059cbb906044016020604051808303816000875af115801562000ab6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000adc9190620026cf565b506003850154604080516001600160a01b03909216825260208201849052889160008051602062003693833981519152910160405180910390a2600087815260076020908152604080832089845290915290208054801562000d1f57600062000b46828562002696565b905060005b8281101562000c3c57600084828154811062000b6b5762000b6b620026ef565b60009182526020909120015460405163a9059cbb60e01b81526001600160a01b0391821660048201819052602482018690529250908a169063a9059cbb906044016020604051808303816000875af115801562000bcc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000bf29190620026cf565b50604080516001600160a01b0383168152602081018590528d9160008051602062003693833981519152910160405180910390a2508062000c338162002705565b91505062000b4b565b50600062000c4b83836200267c565b62000c579086620026b9565b9050801562000d1757600389015460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390529089169063a9059cbb906044016020604051808303816000875af115801562000cb6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000cdc9190620026cf565b506003890154604080516001600160a01b039092168252602082018390528c9160008051602062003693833981519152910160405180910390a25b505062000dd6565b600387015460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018590529087169063a9059cbb906044016020604051808303816000875af115801562000d75573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d9b9190620026cf565b506003870154604080516001600160a01b039092168252602082018590528a9160008051602062003693833981519152910160405180910390a25b604080518981526001600160a01b03871660208201528a917f9bbdcafceeb9043b6e16a04299f72661e53572f8026fdc386a0bcc312535718c910160405180910390a2505050505050505062000e2b60018055565b50565b62000e3862001f44565b60008381526004602052604090206003015460ff1662000e6c5760405162461bcd60e51b8152600401620006269062002582565b60008381526004602052604090205442101562000e9d5760405162461bcd60e51b8152600401620006269062002721565b60008381526004602052604090206001015442111562000ed15760405162461bcd60e51b8152600401620006269062002758565b60008381526004602081905260409091200154821062000f055760405162461bcd60e51b815260040162000626906200251d565b6000838152600560209081526040808320858452825280832033845260070190915290205460ff161562000f7c5760405162461bcd60e51b815260206004820152601a60248201527f416c726561647920766f746564206f6e2074686973206d656d65000000000000604482015260640162000626565b6002546040516370a0823160e01b8152336004820152670de0b6b3a7640000916001600160a01b0316906370a0823190602401602060405180830381865afa15801562000fcd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ff391906200278f565b10156200103a5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b604482015260640162000626565b6002546200105c906001600160a01b03163330670de0b6b3a764000062001ff5565b6000838152600560209081526040808320858452825280832033845260078101909252909120805460ff19166001179055811562001107576001816004016000828254620010ab9190620027a9565b90915550503360008181526008830160209081526040808320805460ff1916600190811790915588845260078352818420888552835290832080549182018155835291200180546001600160a01b031916909117905562001140565b60018160050160008282546200111e9190620027a9565b90915550503360009081526008820160205260409020805460ff191660ff1790555b60408051338152831515602082015242818301529051849186917fdf57eaff2128fe3b396004f8df96270e86a905fc4f6ac6ca7a2e6870416dc9ee9181900360600190a3506200118f60018055565b505050565b60066020528160005260406000208181548110620011b157600080fd5b90600052602060002001600091509150505481565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa15801562001210573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200123691906200278f565b905090565b600082815260046020819052604090912001546060908210620012725760405162461bcd60e51b815260040162000626906200251d565b600083815260076020908152604080832085845282529182902080548351818402810184019094528084529091830182828015620012da57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620012bb575b505050505090505b92915050565b6005602090815260009283526040808420909152908252902080548190620013109062002546565b80601f01602080910402602001604051908101604052809291908181526020018280546200133e9062002546565b80156200138f5780601f1062001363576101008083540402835291602001916200138f565b820191906000526020600020905b8154815290600101906020018083116200137157829003601f168201915b505050505090806001018054620013a69062002546565b80601f0160208091040260200160405190810160405280929190818152602001828054620013d49062002546565b8015620014255780601f10620013f95761010080835404028352916020019162001425565b820191906000526020600020905b8154815290600101906020018083116200140757829003601f168201915b5050505050908060020180546200143c9062002546565b80601f01602080910402602001604051908101604052809291908181526020018280546200146a9062002546565b8015620014bb5780601f106200148f57610100808354040283529160200191620014bb565b820191906000526020600020905b8154815290600101906020018083116200149d57829003601f168201915b5050505060038301546004840154600585015460069095015493946001600160a01b039092169390925087565b620014f262001f44565b60008181526004602052604090206003015460ff16620015265760405162461bcd60e51b8152600401620006269062002582565b600081815260046020526040902054421015620015575760405162461bcd60e51b8152600401620006269062002721565b6000818152600460205260409020600101544211156200158b5760405162461bcd60e51b8152600401620006269062002758565b600081815260036020908152604080832033845290915290205460ff1615620015f75760405162461bcd60e51b815260206004820152601e60248201527f496e697469616c20746f6b656e7320616c726561647920636c61696d65640000604482015260640162000626565b600081815260036020908152604080832033845290915290819020805460ff1916600117905560025490516370a0823160e01b815230600482015268056bc75e2d63100000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156200166e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200169491906200278f565b1015620016e45760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e6365000000604482015260640162000626565b60025462001706906001600160a01b03163368056bc75e2d631000006200205e565b60405168056bc75e2d63100000815233907f194b9d2b6602d2b9fcf8d87cb621fdea56007634cd890e7d670d2145617978c99060200160405180910390a262000e2b60018055565b6000828152600460208190526040822001548210620017815760405162461bcd60e51b815260040162000626906200251d565b6000838152600560208181526040808420868552909152909120908101546004820154620017b09190620027bf565b949350505050565b620017c262001f15565b620017ce600062002091565b565b60025462000e2b906001600160a01b031633308462001ff5565b6000818152600660209081526040918290208054835181840281018401909452808452606093928301828280156200184257602002820191906000526020600020905b8154815260200190600101908083116200182d575b50505050509050919050565b6200185862001f44565b60008481526004602052604090206003015460ff166200188c5760405162461bcd60e51b8152600401620006269062002582565b600084815260046020526040902054421015620018bd5760405162461bcd60e51b8152600401620006269062002721565b600084815260046020526040902060010154421115620018f15760405162461bcd60e51b8152600401620006269062002758565b60008351116200193b5760405162461bcd60e51b81526020600482015260146024820152734e616d652063616e6e6f7420626520656d70747960601b604482015260640162000626565b60008251116200198e5760405162461bcd60e51b815260206004820152601a60248201527f496d61676520686173682063616e6e6f7420626520656d707479000000000000604482015260640162000626565b6000815111620019e15760405162461bcd60e51b815260206004820152601b60248201527f4465736372697074696f6e2063616e6e6f7420626520656d7074790000000000604482015260640162000626565b6002546040516370a0823160e01b8152336004820152680340aad21b3b700000916001600160a01b0316906370a0823190602401602060405180830381865afa15801562001a33573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a5991906200278f565b101562001aa05760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b604482015260640162000626565b60025462001ac3906001600160a01b03163330680340aad21b3b70000062001ff5565b6000848152600460208181526040808420909201546005825282842081855290915291208062001af486826200283b565b506001810162001b0585826200283b565b506002810162001b1684826200283b565b506003810180546001600160a01b03191633179055426006808301919091556000600480840182905560058401829055888252602092835260408083208054600181018255908452848420018690558983529281905291812090910180549162001b808362002705565b919050555081867fd8bb7f0d4bcc56e57ed640359ee099aa9d648e2a263bae8e1e71a2a93b865e56338888884260405162001bc095949392919062002908565b60405180910390a3505062001bd460018055565b50505050565b60008062001be762001f15565b6000831162001c395760405162461bcd60e51b815260206004820152601f60248201527f4475726174696f6e206d7573742062652067726561746572207468616e203000604482015260640162000626565b42600062001c488583620027a9565b604080516020810185905290810182905233606090811b6bffffffffffffffffffffffff19169082015243607482015290915060940160408051808303601f190181528282528051602091820120908301859052908201839052606080830182905233901b6bffffffffffffffffffffffff19166080830152935060940160408051601f198184030181529181528151602092830120600081815260049093529120549094501562001d3d5760405162461bcd60e51b815260206004820152601760248201527f4576656e7420494420616c726561647920657869737473000000000000000000604482015260640162000626565b6040805161010081018252838152602080820184815282840187815260016060850181815260006080870181815260a0880182815260c0890183815260e08a018481528f85526004998a9052938b902099518a5596519489019490945593516002880155905160038701805491151560ff19928316179055925194860194909455516005850180546001600160a01b03929092166001600160a01b031990921691909117905590516006840155905160079092018054921515929091169190911790555184907f4833c6ce5ed47875c5cdbe605847f1f4399f975cd725e692cc5987e321f9f8139062001e46908590859088909283526020830191909152604082015260600190565b60405180910390a25050915091565b62001e5f62001f15565b6001600160a01b03811662001e8b57604051631e4fbdf760e01b81526000600482015260240162000626565b62000e2b8162002091565b6000838152600460208190526040822001548190841062001ecb5760405162461bcd60e51b815260040162000626906200251d565b505060009283526005602090815260408085209385529281528284206001600160a01b0392909216845260078201815282842054600890920190529082205460ff90911692910b90565b6000546001600160a01b03163314620017ce5760405163118cdaa760e01b815233600482015260240162000626565b60026001540362001f6857604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b60008080805b6000858152600460208190526040909120015481101562001fed57600085815260056020908152604080832084845290915290206004015483101562001fd857600085815260056020908152604080832084845290915290206004015492509050805b8062001fe48162002705565b91505062001f75565b509392505050565b6040516001600160a01b03848116602483015283811660448301526064820183905262001bd49186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050620020e1565b6040516001600160a01b038381166024830152604482018390526200118f91859182169063a9059cbb906064016200202b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080602060008451602086016000885af18062002105576040513d6000823e3d81fd5b50506000513d915081156200211f5780600114156200212c565b6001600160a01b0384163b155b1562001bd457604051635274afe760e01b81526001600160a01b038516600482015260240162000626565b610d27806200296c83390190565b600080604083850312156200217957600080fd5b50508035926020909101359150565b6000815180845260005b81811015620021b05760208185018101518683018201520162002192565b506000602082860101526020601f19601f83011685010191505092915050565b60e081526000620021e560e083018a62002188565b8281036020840152620021f9818a62002188565b905082810360408401526200220f818962002188565b6001600160a01b039790971660608401525050608081019390935260a083019190915260c0909101529392505050565b6000602082840312156200225257600080fd5b5035919050565b801515811462000e2b57600080fd5b6000806000606084860312156200227e57600080fd5b83359250602084013591506040840135620022998162002259565b809150509250925092565b6020808252825182820181905260009190848201906040850190845b81811015620022e75783516001600160a01b031683529284019291840191600101620022c0565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015620022e7578351835292840192918401916001016200230f565b80356001600160a01b03811681146200234557600080fd5b919050565b600080604083850312156200235e57600080fd5b8235915062002370602084016200232d565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620023a157600080fd5b813567ffffffffffffffff80821115620023bf57620023bf62002379565b604051601f8301601f19908116603f01168101908282118183101715620023ea57620023ea62002379565b816040528381528660208588010111156200240457600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080608085870312156200243b57600080fd5b84359350602085013567ffffffffffffffff808211156200245b57600080fd5b62002469888389016200238f565b945060408701359150808211156200248057600080fd5b6200248e888389016200238f565b93506060870135915080821115620024a557600080fd5b50620024b4878288016200238f565b91505092959194509250565b600060208284031215620024d357600080fd5b620024de826200232d565b9392505050565b600080600060608486031215620024fb57600080fd5b833592506020840135915062002514604085016200232d565b90509250925092565b6020808252600f908201526e125b9d985b1a59081b595b59481251608a1b604082015260600190565b600181811c908216806200255b57607f821691505b6020821081036200257c57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601390820152724576656e74206973206e6f742061637469766560681b604082015260600190565b60008154620025be8162002546565b808552602060018381168015620025de5760018114620025f95762002629565b60ff1985168884015283151560051b88018301955062002629565b866000528260002060005b85811015620026215781548a820186015290830190840162002604565b890184019650505b505050505092915050565b604081526000620026496040830185620025af565b82810360208401526200265d8185620025af565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417620012e257620012e262002666565b600082620026b457634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115620012e257620012e262002666565b600060208284031215620026e257600080fd5b8151620024de8162002259565b634e487b7160e01b600052603260045260246000fd5b6000600182016200271a576200271a62002666565b5060010190565b60208082526019908201527f4576656e7420686173206e6f7420737461727465642079657400000000000000604082015260600190565b60208082526017908201527f4576656e742068617320616c726561647920656e646564000000000000000000604082015260600190565b600060208284031215620027a257600080fd5b5051919050565b80820180821115620012e257620012e262002666565b8181036000831280158383131683831282161715620027e257620027e262002666565b5092915050565b601f8211156200118f57600081815260208120601f850160051c81016020861015620028125750805b601f850160051c820191505b8181101562002833578281556001016200281e565b505050505050565b815167ffffffffffffffff81111562002858576200285862002379565b620028708162002869845462002546565b84620027e9565b602080601f831160018114620028a857600084156200288f5750858301515b600019600386901b1c1916600185901b17855562002833565b600085815260208120601f198616915b82811015620028d957888601518255948401946001909101908401620028b8565b5085821015620028f85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b038616815260a0602082018190526000906200292e9083018762002188565b828103604084015262002942818762002188565b9050828103606084015262002958818662002188565b915050826080830152969550505050505056fe60806040523480156200001157600080fd5b5060405162000d2738038062000d278339810160408190526200003491620002d4565b81816003620000448382620003cd565b506004620000538282620003cd565b5050506200008d336200006b6200009560201b60201c565b6200007890600a620005ae565b6200008790620186a0620005c6565b6200009a565b5050620005f6565b601290565b6001600160a01b038216620000ca5760405163ec442f0560e01b8152600060048201526024015b60405180910390fd5b620000d860008383620000dc565b5050565b6001600160a01b0383166200010b578060026000828254620000ff9190620005e0565b909155506200017f9050565b6001600160a01b03831660009081526020819052604090205481811015620001605760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401620000c1565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166200019d57600280548290039055620001bc565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200020291815260200190565b60405180910390a3505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200023757600080fd5b81516001600160401b03808211156200025457620002546200020f565b604051601f8301601f19908116603f011681019082821181831017156200027f576200027f6200020f565b816040528381526020925086838588010111156200029c57600080fd5b600091505b83821015620002c05785820183015181830184015290820190620002a1565b600093810190920192909252949350505050565b60008060408385031215620002e857600080fd5b82516001600160401b03808211156200030057600080fd5b6200030e8683870162000225565b935060208501519150808211156200032557600080fd5b50620003348582860162000225565b9150509250929050565b600181811c908216806200035357607f821691505b6020821081036200037457634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003c857600081815260208120601f850160051c81016020861015620003a35750805b601f850160051c820191505b81811015620003c457828155600101620003af565b5050505b505050565b81516001600160401b03811115620003e957620003e96200020f565b6200040181620003fa84546200033e565b846200037a565b602080601f831160018114620004395760008415620004205750858301515b600019600386901b1c1916600185901b178555620003c4565b600085815260208120601f198616915b828110156200046a5788860151825594840194600190910190840162000449565b5085821015620004895787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115620004f0578160001904821115620004d457620004d462000499565b80851615620004e257918102915b93841c9390800290620004b4565b509250929050565b6000826200050957506001620005a8565b816200051857506000620005a8565b81600181146200053157600281146200053c576200055c565b6001915050620005a8565b60ff84111562000550576200055062000499565b50506001821b620005a8565b5060208310610133831016604e8410600b841016171562000581575081810a620005a8565b6200058d8383620004af565b8060001904821115620005a457620005a462000499565b0290505b92915050565b6000620005bf60ff841683620004f8565b9392505050565b8082028115828204841417620005a857620005a862000499565b80820180821115620005a857620005a862000499565b61072180620006066000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063313ce56711610066578063313ce567146100fe57806370a082311461010d57806395d89b4114610136578063a9059cbb1461013e578063dd62ed3e1461015157600080fd5b806306fdde0314610098578063095ea7b3146100b657806318160ddd146100d957806323b872dd146100eb575b600080fd5b6100a061018a565b6040516100ad919061056b565b60405180910390f35b6100c96100c43660046105d5565b61021c565b60405190151581526020016100ad565b6002545b6040519081526020016100ad565b6100c96100f93660046105ff565b610236565b604051601281526020016100ad565b6100dd61011b36600461063b565b6001600160a01b031660009081526020819052604090205490565b6100a061025a565b6100c961014c3660046105d5565b610269565b6100dd61015f36600461065d565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461019990610690565b80601f01602080910402602001604051908101604052809291908181526020018280546101c590610690565b80156102125780601f106101e757610100808354040283529160200191610212565b820191906000526020600020905b8154815290600101906020018083116101f557829003601f168201915b5050505050905090565b60003361022a818585610277565b60019150505b92915050565b600033610244858285610289565b61024f85858561030d565b506001949350505050565b60606004805461019990610690565b60003361022a81858561030d565b610284838383600161036c565b505050565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981101561030757818110156102f857604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064015b60405180910390fd5b6103078484848403600061036c565b50505050565b6001600160a01b03831661033757604051634b637e8f60e11b8152600060048201526024016102ef565b6001600160a01b0382166103615760405163ec442f0560e01b8152600060048201526024016102ef565b610284838383610441565b6001600160a01b0384166103965760405163e602df0560e01b8152600060048201526024016102ef565b6001600160a01b0383166103c057604051634a1406b160e11b8152600060048201526024016102ef565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561030757826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161043391815260200190565b60405180910390a350505050565b6001600160a01b03831661046c57806002600082825461046191906106ca565b909155506104de9050565b6001600160a01b038316600090815260208190526040902054818110156104bf5760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016102ef565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166104fa57600280548290039055610519565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161055e91815260200190565b60405180910390a3505050565b600060208083528351808285015260005b818110156105985785810183015185820160400152820161057c565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146105d057600080fd5b919050565b600080604083850312156105e857600080fd5b6105f1836105b9565b946020939093013593505050565b60008060006060848603121561061457600080fd5b61061d846105b9565b925061062b602085016105b9565b9150604084013590509250925092565b60006020828403121561064d57600080fd5b610656826105b9565b9392505050565b6000806040838503121561067057600080fd5b610679836105b9565b9150610687602084016105b9565b90509250929050565b600181811c908216806106a457607f821691505b6020821081036106c457634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561023057634e487b7160e01b600052601160045260246000fdfea264697066735822122091729996595bae1a07c02097bf9dab6d75312e8750e78c6a306c7efb4c87484564736f6c63430008140033cb7b7c0aba0d2db8e9ff8e7394b81caf422415c5639a94196ed37c431edc723da264697066735822122028d97a0ce3e9cf179a1fc9d8700aa30b0836e6ec71a54d697f8063112674ea5464736f6c63430008140033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001e95760003560e01c8063819c18a8116200010d578063b4447a5911620000a3578063e86ba67a116200007a578063e86ba67a1462000581578063f2fde38b146200058a578063f926892614620005a1578063fe71b8ba14620005d357600080fd5b8063b4447a5914620004cc578063bfdc4a611462000508578063d33ec635146200056d57600080fd5b806394c1a7e511620000e457806394c1a7e5146200046e57806395675322146200047f57806396df4a951462000488578063977d996d146200049f57600080fd5b8063819c18a814620003e05780638da5cb5b14620004065780639350e703146200042c57600080fd5b80633dc78c0311620001835780636bb88e6e116200015a5780636bb88e6e14620003915780636ce0214914620003a8578063715018a614620003bf5780637ef5b6ea14620003c957600080fd5b80633dc78c031462000342578063466d97bd146200035457806366158ac8146200037a57600080fd5b80632c729fd111620001c45780632c729fd1146200025c5780632ca1089814620002735780632caef7a81462000321578063317d9453146200033857600080fd5b8063201e6abc14620001ee5780632765a5de14620002235780632b0b1c491462000243575b600080fd5b62000205620001ff36600462002165565b620005e3565b6040516200021a9796959493929190620021d0565b60405180910390f35b6200023468056bc75e2d6310000081565b6040519081526020016200021a565b6200025a620002543660046200223f565b62000850565b005b6200025a6200026d36600462002268565b62000e2e565b620002da620002843660046200223f565b60009081526004602081905260409091208054600182015460028301546003840154948401546005850154600686015460079096015494979396929560ff9384169592946001600160a01b039092169390921690565b60408051988952602089019790975295870194909452911515606086015260808501526001600160a01b031660a084015260c0830152151560e0820152610100016200021a565b620002346200033236600462002165565b62001194565b62000234620011c6565b6200023469152d02c7e14af680000081565b6200036b6200036536600462002165565b6200123b565b6040516200021a9190620022a4565b620002056200038b36600462002165565b620012e8565b6200025a620003a23660046200223f565b620014e8565b62000234620003b936600462002165565b6200174e565b6200025a620017b8565b6200025a620003da3660046200223f565b620017d0565b620003f7620003f13660046200223f565b620017ea565b6040516200021a9190620022f3565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016200021a565b6200045d6200043d3660046200234a565b600360209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016200021a565b62000234680340aad21b3b70000081565b62000234604681565b6200025a6200049936600462002424565b6200184e565b620004b6620004b03660046200223f565b62001bda565b604080519283526020830191909152016200021a565b6200045d620004dd3660046200234a565b60009182526003602090815260408084206001600160a01b0393909316845291905290205460ff1690565b620002da620005193660046200223f565b60046020819052600091825260409091208054600182015460028301546003840154948401546005850154600686015460079096015494969395929460ff9485169492936001600160a01b03909216921688565b60025462000413906001600160a01b031681565b62000234601e81565b6200025a6200059b366004620024c0565b62001e55565b620005b8620005b2366004620024e5565b62001e96565b60408051921515835260009190910b6020830152016200021a565b62000234670de0b6b3a764000081565b6060806060600080600080600460008a81526020019081526020016000206004015488106200062f5760405162461bcd60e51b815260040162000626906200251d565b60405180910390fd5b60008981526005602081815260408084208c855290915290912060038101546004820154928201546006830154835493948594600186019460028701946001600160a01b039091169390918790620006879062002546565b80601f0160208091040260200160405190810160405280929190818152602001828054620006b59062002546565b8015620007065780601f10620006da5761010080835404028352916020019162000706565b820191906000526020600020905b815481529060010190602001808311620006e857829003601f168201915b505050505096508580546200071b9062002546565b80601f0160208091040260200160405190810160405280929190818152602001828054620007499062002546565b80156200079a5780601f106200076e576101008083540402835291602001916200079a565b820191906000526020600020905b8154815290600101906020018083116200077c57829003601f168201915b50505050509550848054620007af9062002546565b80601f0160208091040260200160405190810160405280929190818152602001828054620007dd9062002546565b80156200082e5780601f1062000802576101008083540402835291602001916200082e565b820191906000526020600020905b8154815290600101906020018083116200081057829003601f168201915b5050505050945097509750975097509750975097505092959891949750929550565b6200085a62001f15565b6200086462001f44565b60008181526004602052604090206003015460ff16620008985760405162461bcd60e51b8152600401620006269062002582565b60008181526004602052604090206007015460ff1615620008fc5760405162461bcd60e51b815260206004820152601760248201527f4576656e7420616c72656164792066696e616c697a6564000000000000000000604482015260640162000626565b60008181526004602081905260409091200154620009525760405162461bcd60e51b8152602060048201526012602482015271139bc81b595b595cc81cdd589b5a5d1d195960721b604482015260640162000626565b600081815260046020526040812060038101805460ff19908116909155600790910180549091166001179055620009898262001f6f565b60008381526004602090815260408083206006018490556005825280832084845290915280822090519293509182908190620009c59062002157565b620009d292919062002634565b604051809103906000f080158015620009ef573d6000803e3d6000fd5b50600085815260046020526040812060050180546001600160a01b0319166001600160a01b0384161790559091508190606462000a38601e69152d02c7e14af68000006200267c565b62000a44919062002696565b9050600062000a5e8269152d02c7e14af6800000620026b9565b600386015460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810185905291925085169063a9059cbb906044016020604051808303816000875af115801562000ab6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000adc9190620026cf565b506003850154604080516001600160a01b03909216825260208201849052889160008051602062003693833981519152910160405180910390a2600087815260076020908152604080832089845290915290208054801562000d1f57600062000b46828562002696565b905060005b8281101562000c3c57600084828154811062000b6b5762000b6b620026ef565b60009182526020909120015460405163a9059cbb60e01b81526001600160a01b0391821660048201819052602482018690529250908a169063a9059cbb906044016020604051808303816000875af115801562000bcc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000bf29190620026cf565b50604080516001600160a01b0383168152602081018590528d9160008051602062003693833981519152910160405180910390a2508062000c338162002705565b91505062000b4b565b50600062000c4b83836200267c565b62000c579086620026b9565b9050801562000d1757600389015460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390529089169063a9059cbb906044016020604051808303816000875af115801562000cb6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000cdc9190620026cf565b506003890154604080516001600160a01b039092168252602082018390528c9160008051602062003693833981519152910160405180910390a25b505062000dd6565b600387015460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018590529087169063a9059cbb906044016020604051808303816000875af115801562000d75573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d9b9190620026cf565b506003870154604080516001600160a01b039092168252602082018590528a9160008051602062003693833981519152910160405180910390a25b604080518981526001600160a01b03871660208201528a917f9bbdcafceeb9043b6e16a04299f72661e53572f8026fdc386a0bcc312535718c910160405180910390a2505050505050505062000e2b60018055565b50565b62000e3862001f44565b60008381526004602052604090206003015460ff1662000e6c5760405162461bcd60e51b8152600401620006269062002582565b60008381526004602052604090205442101562000e9d5760405162461bcd60e51b8152600401620006269062002721565b60008381526004602052604090206001015442111562000ed15760405162461bcd60e51b8152600401620006269062002758565b60008381526004602081905260409091200154821062000f055760405162461bcd60e51b815260040162000626906200251d565b6000838152600560209081526040808320858452825280832033845260070190915290205460ff161562000f7c5760405162461bcd60e51b815260206004820152601a60248201527f416c726561647920766f746564206f6e2074686973206d656d65000000000000604482015260640162000626565b6002546040516370a0823160e01b8152336004820152670de0b6b3a7640000916001600160a01b0316906370a0823190602401602060405180830381865afa15801562000fcd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ff391906200278f565b10156200103a5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b604482015260640162000626565b6002546200105c906001600160a01b03163330670de0b6b3a764000062001ff5565b6000838152600560209081526040808320858452825280832033845260078101909252909120805460ff19166001179055811562001107576001816004016000828254620010ab9190620027a9565b90915550503360008181526008830160209081526040808320805460ff1916600190811790915588845260078352818420888552835290832080549182018155835291200180546001600160a01b031916909117905562001140565b60018160050160008282546200111e9190620027a9565b90915550503360009081526008820160205260409020805460ff191660ff1790555b60408051338152831515602082015242818301529051849186917fdf57eaff2128fe3b396004f8df96270e86a905fc4f6ac6ca7a2e6870416dc9ee9181900360600190a3506200118f60018055565b505050565b60066020528160005260406000208181548110620011b157600080fd5b90600052602060002001600091509150505481565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa15801562001210573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200123691906200278f565b905090565b600082815260046020819052604090912001546060908210620012725760405162461bcd60e51b815260040162000626906200251d565b600083815260076020908152604080832085845282529182902080548351818402810184019094528084529091830182828015620012da57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620012bb575b505050505090505b92915050565b6005602090815260009283526040808420909152908252902080548190620013109062002546565b80601f01602080910402602001604051908101604052809291908181526020018280546200133e9062002546565b80156200138f5780601f1062001363576101008083540402835291602001916200138f565b820191906000526020600020905b8154815290600101906020018083116200137157829003601f168201915b505050505090806001018054620013a69062002546565b80601f0160208091040260200160405190810160405280929190818152602001828054620013d49062002546565b8015620014255780601f10620013f95761010080835404028352916020019162001425565b820191906000526020600020905b8154815290600101906020018083116200140757829003601f168201915b5050505050908060020180546200143c9062002546565b80601f01602080910402602001604051908101604052809291908181526020018280546200146a9062002546565b8015620014bb5780601f106200148f57610100808354040283529160200191620014bb565b820191906000526020600020905b8154815290600101906020018083116200149d57829003601f168201915b5050505060038301546004840154600585015460069095015493946001600160a01b039092169390925087565b620014f262001f44565b60008181526004602052604090206003015460ff16620015265760405162461bcd60e51b8152600401620006269062002582565b600081815260046020526040902054421015620015575760405162461bcd60e51b8152600401620006269062002721565b6000818152600460205260409020600101544211156200158b5760405162461bcd60e51b8152600401620006269062002758565b600081815260036020908152604080832033845290915290205460ff1615620015f75760405162461bcd60e51b815260206004820152601e60248201527f496e697469616c20746f6b656e7320616c726561647920636c61696d65640000604482015260640162000626565b600081815260036020908152604080832033845290915290819020805460ff1916600117905560025490516370a0823160e01b815230600482015268056bc75e2d63100000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156200166e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200169491906200278f565b1015620016e45760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e6365000000604482015260640162000626565b60025462001706906001600160a01b03163368056bc75e2d631000006200205e565b60405168056bc75e2d63100000815233907f194b9d2b6602d2b9fcf8d87cb621fdea56007634cd890e7d670d2145617978c99060200160405180910390a262000e2b60018055565b6000828152600460208190526040822001548210620017815760405162461bcd60e51b815260040162000626906200251d565b6000838152600560208181526040808420868552909152909120908101546004820154620017b09190620027bf565b949350505050565b620017c262001f15565b620017ce600062002091565b565b60025462000e2b906001600160a01b031633308462001ff5565b6000818152600660209081526040918290208054835181840281018401909452808452606093928301828280156200184257602002820191906000526020600020905b8154815260200190600101908083116200182d575b50505050509050919050565b6200185862001f44565b60008481526004602052604090206003015460ff166200188c5760405162461bcd60e51b8152600401620006269062002582565b600084815260046020526040902054421015620018bd5760405162461bcd60e51b8152600401620006269062002721565b600084815260046020526040902060010154421115620018f15760405162461bcd60e51b8152600401620006269062002758565b60008351116200193b5760405162461bcd60e51b81526020600482015260146024820152734e616d652063616e6e6f7420626520656d70747960601b604482015260640162000626565b60008251116200198e5760405162461bcd60e51b815260206004820152601a60248201527f496d61676520686173682063616e6e6f7420626520656d707479000000000000604482015260640162000626565b6000815111620019e15760405162461bcd60e51b815260206004820152601b60248201527f4465736372697074696f6e2063616e6e6f7420626520656d7074790000000000604482015260640162000626565b6002546040516370a0823160e01b8152336004820152680340aad21b3b700000916001600160a01b0316906370a0823190602401602060405180830381865afa15801562001a33573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a5991906200278f565b101562001aa05760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b604482015260640162000626565b60025462001ac3906001600160a01b03163330680340aad21b3b70000062001ff5565b6000848152600460208181526040808420909201546005825282842081855290915291208062001af486826200283b565b506001810162001b0585826200283b565b506002810162001b1684826200283b565b506003810180546001600160a01b03191633179055426006808301919091556000600480840182905560058401829055888252602092835260408083208054600181018255908452848420018690558983529281905291812090910180549162001b808362002705565b919050555081867fd8bb7f0d4bcc56e57ed640359ee099aa9d648e2a263bae8e1e71a2a93b865e56338888884260405162001bc095949392919062002908565b60405180910390a3505062001bd460018055565b50505050565b60008062001be762001f15565b6000831162001c395760405162461bcd60e51b815260206004820152601f60248201527f4475726174696f6e206d7573742062652067726561746572207468616e203000604482015260640162000626565b42600062001c488583620027a9565b604080516020810185905290810182905233606090811b6bffffffffffffffffffffffff19169082015243607482015290915060940160408051808303601f190181528282528051602091820120908301859052908201839052606080830182905233901b6bffffffffffffffffffffffff19166080830152935060940160408051601f198184030181529181528151602092830120600081815260049093529120549094501562001d3d5760405162461bcd60e51b815260206004820152601760248201527f4576656e7420494420616c726561647920657869737473000000000000000000604482015260640162000626565b6040805161010081018252838152602080820184815282840187815260016060850181815260006080870181815260a0880182815260c0890183815260e08a018481528f85526004998a9052938b902099518a5596519489019490945593516002880155905160038701805491151560ff19928316179055925194860194909455516005850180546001600160a01b03929092166001600160a01b031990921691909117905590516006840155905160079092018054921515929091169190911790555184907f4833c6ce5ed47875c5cdbe605847f1f4399f975cd725e692cc5987e321f9f8139062001e46908590859088909283526020830191909152604082015260600190565b60405180910390a25050915091565b62001e5f62001f15565b6001600160a01b03811662001e8b57604051631e4fbdf760e01b81526000600482015260240162000626565b62000e2b8162002091565b6000838152600460208190526040822001548190841062001ecb5760405162461bcd60e51b815260040162000626906200251d565b505060009283526005602090815260408085209385529281528284206001600160a01b0392909216845260078201815282842054600890920190529082205460ff90911692910b90565b6000546001600160a01b03163314620017ce5760405163118cdaa760e01b815233600482015260240162000626565b60026001540362001f6857604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b60008080805b6000858152600460208190526040909120015481101562001fed57600085815260056020908152604080832084845290915290206004015483101562001fd857600085815260056020908152604080832084845290915290206004015492509050805b8062001fe48162002705565b91505062001f75565b509392505050565b6040516001600160a01b03848116602483015283811660448301526064820183905262001bd49186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050620020e1565b6040516001600160a01b038381166024830152604482018390526200118f91859182169063a9059cbb906064016200202b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080602060008451602086016000885af18062002105576040513d6000823e3d81fd5b50506000513d915081156200211f5780600114156200212c565b6001600160a01b0384163b155b1562001bd457604051635274afe760e01b81526001600160a01b038516600482015260240162000626565b610d27806200296c83390190565b600080604083850312156200217957600080fd5b50508035926020909101359150565b6000815180845260005b81811015620021b05760208185018101518683018201520162002192565b506000602082860101526020601f19601f83011685010191505092915050565b60e081526000620021e560e083018a62002188565b8281036020840152620021f9818a62002188565b905082810360408401526200220f818962002188565b6001600160a01b039790971660608401525050608081019390935260a083019190915260c0909101529392505050565b6000602082840312156200225257600080fd5b5035919050565b801515811462000e2b57600080fd5b6000806000606084860312156200227e57600080fd5b83359250602084013591506040840135620022998162002259565b809150509250925092565b6020808252825182820181905260009190848201906040850190845b81811015620022e75783516001600160a01b031683529284019291840191600101620022c0565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015620022e7578351835292840192918401916001016200230f565b80356001600160a01b03811681146200234557600080fd5b919050565b600080604083850312156200235e57600080fd5b8235915062002370602084016200232d565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620023a157600080fd5b813567ffffffffffffffff80821115620023bf57620023bf62002379565b604051601f8301601f19908116603f01168101908282118183101715620023ea57620023ea62002379565b816040528381528660208588010111156200240457600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080608085870312156200243b57600080fd5b84359350602085013567ffffffffffffffff808211156200245b57600080fd5b62002469888389016200238f565b945060408701359150808211156200248057600080fd5b6200248e888389016200238f565b93506060870135915080821115620024a557600080fd5b50620024b4878288016200238f565b91505092959194509250565b600060208284031215620024d357600080fd5b620024de826200232d565b9392505050565b600080600060608486031215620024fb57600080fd5b833592506020840135915062002514604085016200232d565b90509250925092565b6020808252600f908201526e125b9d985b1a59081b595b59481251608a1b604082015260600190565b600181811c908216806200255b57607f821691505b6020821081036200257c57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601390820152724576656e74206973206e6f742061637469766560681b604082015260600190565b60008154620025be8162002546565b808552602060018381168015620025de5760018114620025f95762002629565b60ff1985168884015283151560051b88018301955062002629565b866000528260002060005b85811015620026215781548a820186015290830190840162002604565b890184019650505b505050505092915050565b604081526000620026496040830185620025af565b82810360208401526200265d8185620025af565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417620012e257620012e262002666565b600082620026b457634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115620012e257620012e262002666565b600060208284031215620026e257600080fd5b8151620024de8162002259565b634e487b7160e01b600052603260045260246000fd5b6000600182016200271a576200271a62002666565b5060010190565b60208082526019908201527f4576656e7420686173206e6f7420737461727465642079657400000000000000604082015260600190565b60208082526017908201527f4576656e742068617320616c726561647920656e646564000000000000000000604082015260600190565b600060208284031215620027a257600080fd5b5051919050565b80820180821115620012e257620012e262002666565b8181036000831280158383131683831282161715620027e257620027e262002666565b5092915050565b601f8211156200118f57600081815260208120601f850160051c81016020861015620028125750805b601f850160051c820191505b8181101562002833578281556001016200281e565b505050505050565b815167ffffffffffffffff81111562002858576200285862002379565b620028708162002869845462002546565b84620027e9565b602080601f831160018114620028a857600084156200288f5750858301515b600019600386901b1c1916600185901b17855562002833565b600085815260208120601f198616915b82811015620028d957888601518255948401946001909101908401620028b8565b5085821015620028f85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b038616815260a0602082018190526000906200292e9083018762002188565b828103604084015262002942818762002188565b9050828103606084015262002958818662002188565b915050826080830152969550505050505056fe60806040523480156200001157600080fd5b5060405162000d2738038062000d278339810160408190526200003491620002d4565b81816003620000448382620003cd565b506004620000538282620003cd565b5050506200008d336200006b6200009560201b60201c565b6200007890600a620005ae565b6200008790620186a0620005c6565b6200009a565b5050620005f6565b601290565b6001600160a01b038216620000ca5760405163ec442f0560e01b8152600060048201526024015b60405180910390fd5b620000d860008383620000dc565b5050565b6001600160a01b0383166200010b578060026000828254620000ff9190620005e0565b909155506200017f9050565b6001600160a01b03831660009081526020819052604090205481811015620001605760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401620000c1565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166200019d57600280548290039055620001bc565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200020291815260200190565b60405180910390a3505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200023757600080fd5b81516001600160401b03808211156200025457620002546200020f565b604051601f8301601f19908116603f011681019082821181831017156200027f576200027f6200020f565b816040528381526020925086838588010111156200029c57600080fd5b600091505b83821015620002c05785820183015181830184015290820190620002a1565b600093810190920192909252949350505050565b60008060408385031215620002e857600080fd5b82516001600160401b03808211156200030057600080fd5b6200030e8683870162000225565b935060208501519150808211156200032557600080fd5b50620003348582860162000225565b9150509250929050565b600181811c908216806200035357607f821691505b6020821081036200037457634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003c857600081815260208120601f850160051c81016020861015620003a35750805b601f850160051c820191505b81811015620003c457828155600101620003af565b5050505b505050565b81516001600160401b03811115620003e957620003e96200020f565b6200040181620003fa84546200033e565b846200037a565b602080601f831160018114620004395760008415620004205750858301515b600019600386901b1c1916600185901b178555620003c4565b600085815260208120601f198616915b828110156200046a5788860151825594840194600190910190840162000449565b5085821015620004895787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115620004f0578160001904821115620004d457620004d462000499565b80851615620004e257918102915b93841c9390800290620004b4565b509250929050565b6000826200050957506001620005a8565b816200051857506000620005a8565b81600181146200053157600281146200053c576200055c565b6001915050620005a8565b60ff84111562000550576200055062000499565b50506001821b620005a8565b5060208310610133831016604e8410600b841016171562000581575081810a620005a8565b6200058d8383620004af565b8060001904821115620005a457620005a462000499565b0290505b92915050565b6000620005bf60ff841683620004f8565b9392505050565b8082028115828204841417620005a857620005a862000499565b80820180821115620005a857620005a862000499565b61072180620006066000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063313ce56711610066578063313ce567146100fe57806370a082311461010d57806395d89b4114610136578063a9059cbb1461013e578063dd62ed3e1461015157600080fd5b806306fdde0314610098578063095ea7b3146100b657806318160ddd146100d957806323b872dd146100eb575b600080fd5b6100a061018a565b6040516100ad919061056b565b60405180910390f35b6100c96100c43660046105d5565b61021c565b60405190151581526020016100ad565b6002545b6040519081526020016100ad565b6100c96100f93660046105ff565b610236565b604051601281526020016100ad565b6100dd61011b36600461063b565b6001600160a01b031660009081526020819052604090205490565b6100a061025a565b6100c961014c3660046105d5565b610269565b6100dd61015f36600461065d565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461019990610690565b80601f01602080910402602001604051908101604052809291908181526020018280546101c590610690565b80156102125780601f106101e757610100808354040283529160200191610212565b820191906000526020600020905b8154815290600101906020018083116101f557829003601f168201915b5050505050905090565b60003361022a818585610277565b60019150505b92915050565b600033610244858285610289565b61024f85858561030d565b506001949350505050565b60606004805461019990610690565b60003361022a81858561030d565b610284838383600161036c565b505050565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981101561030757818110156102f857604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064015b60405180910390fd5b6103078484848403600061036c565b50505050565b6001600160a01b03831661033757604051634b637e8f60e11b8152600060048201526024016102ef565b6001600160a01b0382166103615760405163ec442f0560e01b8152600060048201526024016102ef565b610284838383610441565b6001600160a01b0384166103965760405163e602df0560e01b8152600060048201526024016102ef565b6001600160a01b0383166103c057604051634a1406b160e11b8152600060048201526024016102ef565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561030757826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161043391815260200190565b60405180910390a350505050565b6001600160a01b03831661046c57806002600082825461046191906106ca565b909155506104de9050565b6001600160a01b038316600090815260208190526040902054818110156104bf5760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016102ef565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166104fa57600280548290039055610519565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161055e91815260200190565b60405180910390a3505050565b600060208083528351808285015260005b818110156105985785810183015185820160400152820161057c565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146105d057600080fd5b919050565b600080604083850312156105e857600080fd5b6105f1836105b9565b946020939093013593505050565b60008060006060848603121561061457600080fd5b61061d846105b9565b925061062b602085016105b9565b9150604084013590509250925092565b60006020828403121561064d57600080fd5b610656826105b9565b9392505050565b6000806040838503121561067057600080fd5b610679836105b9565b9150610687602084016105b9565b90509250929050565b600181811c908216806106a457607f821691505b6020821081036106c457634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561023057634e487b7160e01b600052601160045260246000fdfea264697066735822122091729996595bae1a07c02097bf9dab6d75312e8750e78c6a306c7efb4c87484564736f6c63430008140033cb7b7c0aba0d2db8e9ff8e7394b81caf422415c5639a94196ed37c431edc723da264697066735822122028d97a0ce3e9cf179a1fc9d8700aa30b0836e6ec71a54d697f8063112674ea5464736f6c63430008140033",
  "devdoc": {
    "author": "CropCircle Team",
    "details": "Implementation of the CropCircle protocol for in-person events on CORN network",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "events": {
      "EventCreated(bytes32,uint256,uint256,bytes32)": {
        "params": {
          "endTime": "The end time of the event",
          "eventId": "The unique identifier of the event",
          "qrCodeHash": "The hash of the event's QR code",
          "startTime": "The start time of the event"
        }
      },
      "EventEnded(bytes32,uint256,address)": {
        "params": {
          "eventId": "The event ID",
          "tokenAddress": "The address of the newly deployed token",
          "winningMemeId": "The ID of the winning meme"
        }
      },
      "InitialTokensProvided(address,uint256)": {
        "params": {
          "amount": "The amount of tokens provided",
          "user": "The address of the token recipient"
        }
      },
      "MemeSubmitted(bytes32,uint256,address,string,string,string,uint256)": {
        "params": {
          "creator": "The address of the meme creator",
          "description": "The description of the meme",
          "eventId": "The event ID",
          "imageHash": "The IPFS hash of the meme image",
          "memeId": "The ID of the submitted meme",
          "name": "The name of the meme (token ticker)",
          "timestamp": "The submission timestamp"
        }
      },
      "TokensDistributed(bytes32,address,uint256)": {
        "params": {
          "amount": "The amount of tokens distributed",
          "eventId": "The event ID",
          "recipient": "The address of the token recipient"
        }
      },
      "VoteCast(bytes32,uint256,address,bool,uint256)": {
        "params": {
          "eventId": "The event ID",
          "isUpvote": "Whether the vote is an upvote (true) or downvote (false)",
          "memeId": "The ID of the meme being voted on",
          "timestamp": "The vote timestamp",
          "voter": "The address of the voter"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor sets the contract deployer as the owner and stores the CROP token address",
        "params": {
          "_cropTokenAddress": "The address of the deployed CROP token"
        }
      },
      "createEvent(uint256)": {
        "details": "Automatically generates a QR code hash internally",
        "params": {
          "duration": "The duration of the event in seconds"
        },
        "returns": {
          "eventId": "The unique identifier of the created event",
          "qrCodeHash": "The generated QR code hash for frontend use"
        }
      },
      "endEvent(bytes32)": {
        "params": {
          "eventId": "The event ID"
        }
      },
      "getContractTokenBalance()": {
        "returns": {
          "_0": "The contract's token balance"
        }
      },
      "getEventDetails(bytes32)": {
        "params": {
          "eventId": "The event ID"
        },
        "returns": {
          "active": "Whether the event is active",
          "endTime": "The end time of the event",
          "isFinalized": "Whether the event has been finalized",
          "memeCount": "The number of memes submitted",
          "qrCodeHash": "The hash of the event's QR code",
          "startTime": "The start time of the event",
          "winningMemeId": "The ID of the winning meme (if event has ended)",
          "winningTokenAddress": "The address of the winning token (if event has ended)"
        }
      },
      "getEventMemeIds(bytes32)": {
        "params": {
          "eventId": "The event ID"
        },
        "returns": {
          "_0": "An array of meme IDs"
        }
      },
      "getMemeDetails(bytes32,uint256)": {
        "params": {
          "eventId": "The event ID",
          "memeId": "The meme ID"
        },
        "returns": {
          "creator": "The address of the meme creator",
          "description": "The description of the meme",
          "downvotes": "The number of downvotes",
          "imageHash": "The IPFS hash of the meme image",
          "name": "The name of the meme",
          "timestamp": "The submission timestamp",
          "upvotes": "The number of upvotes"
        }
      },
      "getMemeScore(bytes32,uint256)": {
        "params": {
          "eventId": "The event ID",
          "memeId": "The meme ID"
        },
        "returns": {
          "_0": "The total score"
        }
      },
      "getMemeUpvoters(bytes32,uint256)": {
        "params": {
          "eventId": "The event ID",
          "memeId": "The meme ID"
        },
        "returns": {
          "_0": "The array of upvoter addresses"
        }
      },
      "getUserVote(bytes32,uint256,address)": {
        "params": {
          "eventId": "The event ID",
          "memeId": "The meme ID",
          "user": "The user address"
        },
        "returns": {
          "hasVoted": "Whether the user has voted",
          "voteType": "The type of vote (1 for upvote, -1 for downvote, 0 if no vote)"
        }
      },
      "hasUserClaimedTokens(bytes32,address)": {
        "params": {
          "eventId": "The event ID",
          "user": "The user address to check"
        },
        "returns": {
          "_0": "Whether the user has claimed tokens"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "provideInitialTokens(bytes32)": {
        "details": "This function would typically be called when a user scans the QR code",
        "params": {
          "eventId": "The event ID"
        }
      },
      "refillTokens(uint256)": {
        "params": {
          "amount": "The amount of tokens to add"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "submitMeme(bytes32,string,string,string)": {
        "params": {
          "description": "The description of the meme",
          "eventId": "The event ID",
          "imageHash": "The IPFS hash of the meme image",
          "name": "The name of the meme (token ticker)"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "vote(bytes32,uint256,bool)": {
        "params": {
          "eventId": "The event ID",
          "isUpvote": "Whether the vote is an upvote (true) or downvote (false)",
          "memeId": "The ID of the meme to vote on"
        }
      }
    },
    "title": "CropCircle - Collaborative Memecoin Launcher",
    "version": 1
  },
  "userdoc": {
    "events": {
      "EventCreated(bytes32,uint256,uint256,bytes32)": {
        "notice": "Emitted when a new event is created"
      },
      "EventEnded(bytes32,uint256,address)": {
        "notice": "Emitted when an event is finalized and tokens are distributed"
      },
      "InitialTokensProvided(address,uint256)": {
        "notice": "Emitted when initial $CROP tokens are provided to a user"
      },
      "MemeSubmitted(bytes32,uint256,address,string,string,string,uint256)": {
        "notice": "Emitted when a new meme is submitted"
      },
      "TokensDistributed(bytes32,address,uint256)": {
        "notice": "Emitted when tokens are distributed to a user"
      },
      "VoteCast(bytes32,uint256,address,bool,uint256)": {
        "notice": "Emitted when a vote is cast on a meme"
      }
    },
    "kind": "user",
    "methods": {
      "INITIAL_TOKEN_AMOUNT()": {
        "notice": "Initial token amount given to users"
      },
      "MEME_SUBMISSION_COST()": {
        "notice": "Cost to submit a meme"
      },
      "VOTERS_PERCENTAGE()": {
        "notice": "Percentage of tokens allocated to voters (70%)"
      },
      "VOTE_COST()": {
        "notice": "Cost to cast a vote"
      },
      "WINNER_PERCENTAGE()": {
        "notice": "Percentage of tokens allocated to the winner (30%)"
      },
      "WINNING_TOKEN_SUPPLY()": {
        "notice": "Total supply for winning meme token"
      },
      "createEvent(uint256)": {
        "notice": "Creates a new event with the specified duration"
      },
      "cropToken()": {
        "notice": "Address of the CROP token contract"
      },
      "endEvent(bytes32)": {
        "notice": "Finalizes an event, determining the winner and deploying the token"
      },
      "eventMemeIds(bytes32,uint256)": {
        "notice": "Mapping from eventId to array of meme IDs"
      },
      "events(bytes32)": {
        "notice": "Mapping from eventId to Event data"
      },
      "getContractTokenBalance()": {
        "notice": "Gets the contract's CROP token balance"
      },
      "getEventDetails(bytes32)": {
        "notice": "Gets details about an event"
      },
      "getEventMemeIds(bytes32)": {
        "notice": "Gets all meme IDs for an event"
      },
      "getMemeDetails(bytes32,uint256)": {
        "notice": "Gets details about a meme"
      },
      "getMemeScore(bytes32,uint256)": {
        "notice": "Gets the total score of a meme (upvotes - downvotes)"
      },
      "getMemeUpvoters(bytes32,uint256)": {
        "notice": "Gets the upvoters for a specific meme"
      },
      "getUserVote(bytes32,uint256,address)": {
        "notice": "Checks if a user has voted on a specific meme"
      },
      "hasClaimedTokens(bytes32,address)": {
        "notice": "Mapping to track users who have already claimed their initial tokens"
      },
      "hasUserClaimedTokens(bytes32,address)": {
        "notice": "Checks if an address has already claimed their initial tokens for an event"
      },
      "memes(bytes32,uint256)": {
        "notice": "Mapping from eventId to memeId to Meme data"
      },
      "provideInitialTokens(bytes32)": {
        "notice": "Provides initial $CROP tokens to a user (callable only once per user per event)"
      },
      "refillTokens(uint256)": {
        "notice": "Allows the owner to refill the contract's CROP token balance"
      },
      "submitMeme(bytes32,string,string,string)": {
        "notice": "Submits a new meme to an event"
      },
      "vote(bytes32,uint256,bool)": {
        "notice": "Casts a vote on a meme"
      }
    },
    "notice": "This contract allows users to participate in meme creation and voting for memecoin launches",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/CropCircle.sol:CropCircle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1498,
        "contract": "contracts/CropCircle.sol:CropCircle",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1670,
        "contract": "contracts/CropCircle.sol:CropCircle",
        "label": "cropToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)967"
      },
      {
        "astId": 1677,
        "contract": "contracts/CropCircle.sol:CropCircle",
        "label": "hasClaimedTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1725,
        "contract": "contracts/CropCircle.sol:CropCircle",
        "label": "events",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(EventInfo)1719_storage)"
      },
      {
        "astId": 1733,
        "contract": "contracts/CropCircle.sol:CropCircle",
        "label": "memes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_struct(Meme)1701_storage))"
      },
      {
        "astId": 1739,
        "contract": "contracts/CropCircle.sol:CropCircle",
        "label": "eventMemeIds",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 1747,
        "contract": "contracts/CropCircle.sol:CropCircle",
        "label": "memeUpvoters",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_array(t_address)dyn_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)967": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_int8": {
        "encoding": "inplace",
        "label": "int8",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_int8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => int8)",
        "numberOfBytes": "32",
        "value": "t_int8"
      },
      "t_mapping(t_bytes32,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint256,t_array(t_address)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint256 => address[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint256,t_struct(Meme)1701_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint256 => struct CropCircle.Meme))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Meme)1701_storage)"
      },
      "t_mapping(t_bytes32,t_struct(EventInfo)1719_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct CropCircle.EventInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(EventInfo)1719_storage"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Meme)1701_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CropCircle.Meme)",
        "numberOfBytes": "32",
        "value": "t_struct(Meme)1701_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(EventInfo)1719_storage": {
        "encoding": "inplace",
        "label": "struct CropCircle.EventInfo",
        "members": [
          {
            "astId": 1704,
            "contract": "contracts/CropCircle.sol:CropCircle",
            "label": "startTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1706,
            "contract": "contracts/CropCircle.sol:CropCircle",
            "label": "endTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1708,
            "contract": "contracts/CropCircle.sol:CropCircle",
            "label": "qrCodeHash",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 1710,
            "contract": "contracts/CropCircle.sol:CropCircle",
            "label": "active",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 1712,
            "contract": "contracts/CropCircle.sol:CropCircle",
            "label": "memeCount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1714,
            "contract": "contracts/CropCircle.sol:CropCircle",
            "label": "winningTokenAddress",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 1716,
            "contract": "contracts/CropCircle.sol:CropCircle",
            "label": "winningMemeId",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1718,
            "contract": "contracts/CropCircle.sol:CropCircle",
            "label": "isFinalized",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Meme)1701_storage": {
        "encoding": "inplace",
        "label": "struct CropCircle.Meme",
        "members": [
          {
            "astId": 1680,
            "contract": "contracts/CropCircle.sol:CropCircle",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1682,
            "contract": "contracts/CropCircle.sol:CropCircle",
            "label": "imageHash",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1684,
            "contract": "contracts/CropCircle.sol:CropCircle",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1686,
            "contract": "contracts/CropCircle.sol:CropCircle",
            "label": "creator",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 1688,
            "contract": "contracts/CropCircle.sol:CropCircle",
            "label": "upvotes",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1690,
            "contract": "contracts/CropCircle.sol:CropCircle",
            "label": "downvotes",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1692,
            "contract": "contracts/CropCircle.sol:CropCircle",
            "label": "timestamp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1696,
            "contract": "contracts/CropCircle.sol:CropCircle",
            "label": "hasVoted",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 1700,
            "contract": "contracts/CropCircle.sol:CropCircle",
            "label": "voteType",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_int8)"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}